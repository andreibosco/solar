// Inicialização da árvore de arquivos 
$(function(){
  var selNodes;
  $("#tree").dynatree({
    minExpandLevel: 2,
    checkbox: true,
    selectMode: 3,
    children: treeData,
    onSelect: function(select, node) {
      selNodes = node.tree.getSelectedNodes();
    },
    onClick: function(node, event) {
      if ( event.shiftKey ) {
        editNode(node);
        return false;
      }
      if ( node.getEventTargetType(event) == "title" )
        node.toggleSelect();
    },
    onDblClick: function(node, event) {
      editNode(node);
      return false;
    },
    onKeydown: function(node, event) {
      switch( event.which ) {
        case 113: // [F2]
          editNode(node);
          return false;
        case 32: // barra
          node.toggleSelect();
          return false;
        case 46: // [delete]
          deleteNodes([node]);
      }
    },

    dnd: {
      onDragStart: function(node) {
        /** This function MUST be defined to enable dragging for the tree.
         *  Return false to cancel dragging of node. */
        return true;
      },
      onDragStop: function(node) {
        // This function is optional.
        // SALVAR ALTERAÇÃO
    },

    autoExpandMS: 1000,
    preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.

    onDragEnter: function(node, sourceNode) {
      /** sourceNode may be null for non-dynatree droppables.
       *  Return false to disallow dropping on node. In this case
       *  onDragOver and onDragLeave are not called.
       *  Return 'over', 'before, or 'after' to force a hitMode.
       *  Return ['before', 'after'] to restrict available hitModes.
       *  Any other return value will calc the hitMode from the cursor position.
       */
      return true;
    },
    onDragOver: function(node, sourceNode, hitMode) {
      /** Return false to disallow dropping this node. **/
      if(node.isDescendantOf(sourceNode)){ // Impede que o "pai" seja arrastado para o próprio filho
        return false;
      }
      // Prohibit creating childs in non-folders (only sorting allowed)
      if( !node.data.isFolder && hitMode === "over" ){
        return "after";
      }
    },
    onDrop: function(node, sourceNode, hitMode, ui, draggable) {
      /** This function MUST be defined to enable dropping of items on the tree. */
      if(node.data.isFolder) // se for pasta
        sourceNode.move(node, hitMode); // move para o nó
      else // se tiver
        sourceNode.move(node.parent, hitMode); // move para o pai do nó (a pasta a qual pertence)
      // expand the drop target
      // sourceNode.expand(true);
    },
    onDragLeave: function(node, sourceNode) {
      /** Always called if onDragEnter was called. */
    }
  }

  });

  // criar novo folder com texto padrao e foco para editar
  $("#btn-new-folder").click(function() {
    var node              = $("#tree").dynatree("getActiveNode");
    var new_folder_number = 0; // utilizado para cada nova pasta ter um nome diferente
    var new_folder_name   = '<%= I18n.t(:new_folder, scope: [:lessons, :files]) %>';

    if (node != null && node.data.isFolder) {

      while(validName(node, new_folder_name) == false){ // verifica se o nome já existe
        new_folder_number = new_folder_number+1;
        new_folder_name   = '<%= I18n.t(:new_folder, scope: [:lessons, :files]) %>'+new_folder_number; // Nova Pasta1, Nova Pasta2, ...
      }

      node.addChild({ title: new_folder_name, isFolder: true, focus: true }); // cria nó

      node_path = getPath(node);
      new_node  = node.getChildren()[node.countChildren()-1]; // recupera último nó criado na pasta "pai"

      newFolder(new_node, node_path); // cria pasta no sistema

    }

    return false;
  });

  $("#btn-deselect-all").click(function(){
    $("#tree").dynatree("getRoot").visit(function(node) {
      node.select(false);
    });
    return false;
  });

  $("#btn-select-all").click(function(){
    $("#tree").dynatree("getRoot").visit(function(node) {
      node.select(true);
    });
    return false;
  });

  $("#btn-remove-node").click(function(){
    deleteNodes(selNodes); // deleta os nós que foram selecionados
  });

  $("#btn-clean-lesson").click(function(){
    deleteNodes([$("#tree").dynatree("getTree").getNodeByKey("_2")]); // deleta todos os nós
  });

});

function editNode(node) {
  
  if (node.data.key == '_2') // raiz visivel
    return false;

  var prevTitle = node.data.title,
  tree = node.tree;
  tree.$widget.unbind(); // Disable dynatree mouse- and key handling
  $(".dynatree-title", node.span).html("<input id='editNode' value='" + prevTitle + "'>"); // Replace node with <input>

  $("input#editNode") // Focus <input> and bind keyboard handler
    .focus()
    .keydown(function(event) {
      switch( event.which ) {
        case 27: // [esc]
          $("input#editNode").val(prevTitle); // discard changes on [esc]
          $(this).blur();
          break;
        case 13: // [enter]

          var new_title = $("input#editNode").val(); // Accept new value, when user leaves <input>
          node_path     = getPath(node); // recupera caminho do nó antes de mudar o título

          if(node.data.title != new_title){
            if(validName(node.parent, new_title) && new_title.length != 0){
              renameNode(node, new_title, node_path); // renomeia nó
              node.setTitle(new_title);
            }else{
              $("input#editNode").val(node.data.title); // retorna ao antigo título
              flash_message("<%=I18n.t(:name_error, :scope => [:lesson_files])%>", "alert");
            }             
          }else
            erase_flash_messages();

          $(this).blur(); // simulate blur to accept new value
          break;
      }
    }).blur(function(event){
      // Accept new value, when user leaves <input>
      var title = $("input#editNode").val();
      node.setTitle(title); 
      // Re-enable mouse and keyboard handlling
      tree.$widget.bind();
      node.focus();
    });

}

// Função para excluir nós selecionados ou todos
function deleteNodes(nodes){
  var i = 0;
  if(nodes[0].data.key != "_2"){ // remover selecionados
    if (confirm("<%=I18n.t(:delete_confirm, :scope => [:lesson_files])%>")){
      for (i; i < nodes.length; i++){
        if (nodes[i].li != null && nodes[i].data.key != '_2')
          saveDeletion(nodes[i], false);
      }
    }else
      return false;
  }else{ // remover todos
    if (confirm("<%=I18n.t(:clean_lesson_confirm, :scope => [:lesson_files])%>"))
      saveDeletion(nodes[0], true);
    else
      return false;
  }
}

// Salva a deleção de um nó
function saveDeletion(node, root_node){
  url       = $("#remove_path").attr("value"); // url para deleção
  node_path = getPath(node); // caminho do nó

  $.ajax({
    type: 'GET',
    url: url,
    data: {
      "path": node_path,
      "root_node": root_node // informa se é a deleção do nó raiz, ou seja, de todos os arquivos da aula
    },
    success: function(data) {
      node.removeChildren(); // remove filhos do nó
      if(root_node == false){ // se não for a raiz, remove o nó
        node.remove();
      }
      erase_flash_messages();
    },
    error: function(data) {
      flash_message("<%=I18n.t(:delete_error, :scope => [:lesson_files])%>", "alert");
    }
  });
}

// Retorna o caminho em que o nó se encontra
function getPath(node){
  var path = []; 
  path.unshift(node.data.title); 
  node.visitParents(function(node){ 
    if(node.parent && node.data.key != "_2")  // se não for raiz
      path.unshift(node.data.title); // cada novo título do nó é adicionado ao começo 
  }); 
  return "/" + path.join("/"); 
}

// Verifica se o nome do nó é um nome válido
function validName(parent_node, name){
  var unique_name = true;
  parent_node.visit(function(childNode){ // varre todos os filhos do nó pai
    if(childNode.data.title == name){ // verifica se nome escolhido já existe
      unique_name = false;
    }
  });
  return unique_name;
}

// Cria pasta
function newFolder(node, path){
  url = $("#btn-new-folder").attr("value");

  $.ajax({
    type: 'POST',
    url: url,
    data: {
      "path": path,
      "folder_name": node.data.title
    },
    success: function(){
      erase_flash_messages();
    },
    error: function() {
      node.remove(); // remove pasta criada
      flash_message("<%=I18n.t(:new_folder_error, :scope => [:lesson_files])%>", "alert");
    }
  });
}

// Renomeia nó
function renameNode(node, new_title, path){
  url = $("#rename_path").attr("value");

  $.ajax({
    type: 'PUT',
    url: url,
    data: {
      "path": node_path,
      "node_name": new_title,
      "previous_name": node.data.title
    },
    success: function(){
      erase_flash_messages();
    },
    error: function() {
      node.setTitle(node.data.title); // retorna ao antigo título
      flash_message("<%=I18n.t(:rename_error, :scope => [:lesson_files])%>", "alert");
    }
  }); 
}