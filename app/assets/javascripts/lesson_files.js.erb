jQuery(function($){

  $.noConflict(); // Resolver conflitos entre os .js chamados. Sem isso, o objeto "tokenInputObject" do filtro é perdido.

  /* Inicialização da árvore de arquivos */
  var selNodes;
  $("#tree").dynatree({
    minExpandLevel: 2,
    checkbox: true,
    selectMode: 3,
    children: treeData,
    imagePath: "/assets/lesson/",
    onSelect: function(select, node) {
      selNodes = node.tree.getSelectedNodes();
    },
    onClick: function(node, event) {
      if ( event.shiftKey ) {
        editNode(node);
        return false;
      }
      if ( node.getEventTargetType(event) == "title" )
        node.toggleSelect();
    },
    onDblClick: function(node, event) {
      editNode(node);
      return false;
    },
    onKeydown: function(node, event) {
      switch( event.which ) {
        case 113: // [F2]
          editNode(node);
          return false;
        case 32: // barra
          node.toggleSelect();
          return false;
        case 46: // [delete]
          deleteNodes([node]);
      }
    }//,

  //   dnd: {
  //     onDragStart: function(node) {
  //       /** This function MUST be defined to enable dragging for the tree.
  //        *  Return false to cancel dragging of node. */
  //       return true;
  //     },

  //   autoExpandMS: 1000,
  //   preventVoidMoves: true, // Prevent dropping nodes 'before self', etc.

  //   onDragEnter: function(node, sourceNode) {
  //     /** sourceNode may be null for non-dynatree droppables.
  //      *  Return false to disallow dropping on node. In this case
  //      *  onDragOver and onDragLeave are not called.
  //      *  Return 'over', 'before, or 'after' to force a hitMode.
  //      *  Return ['before', 'after'] to restrict available hitModes.
  //      *  Any other return value will calc the hitMode from the cursor position.
  //      */
  //     return true;
  //   },
  //   onDragOver: function(node, sourceNode, hitMode) {
  //     /** Return false to disallow dropping this node. **/
  //     if(node.isDescendantOf(sourceNode)){ // Impede que o "pai" seja arrastado para o próprio filho
  //       return false;
  //     }
  //     // Prohibit creating childs in non-folders (only sorting allowed)
  //     if( !node.data.isFolder && hitMode === "over" ){
  //       return "after";
  //     }
  //   },
  //   onDrop: function(node, sourceNode, hitMode, ui, draggable) {
  //     console.log(ui.node);
  //     console.log(draggable);
  //     /** This function MUST be defined to enable dropping of items on the tree. */
  //     if(node.data.isFolder) // se for pasta
  //       sourceNode.move(node, hitMode); // move para o nó
  //     else // se tiver
  //       sourceNode.move(node.parent, hitMode); // move para o pai do nó (a pasta a qual pertence)
  //     // expand the drop target
  //     // sourceNode.expand(true);
  //     saveMove(sourceNode, node);
  //   },
  //   onDragLeave: function(node, sourceNode) {
  //     /** Always called if onDragEnter was called. */
  //   }
  // }
  });

  
  /* Inicialização da árvore de pastas para movimentação de arquivos e pastas */
  $("#folders_tree").dynatree({
    minExpandLevel: 2,
    selectMode: 1,
    children: folderTreeData,
    imagePath: "/assets/lesson/",
    checkbox: true,
    classNames: {checkbox: "dynatree-radio"}, // Override class name for checkbox icon:
    onKeydown: function(node, event) {
      switch( event.which ) {
        case 27: // [F2]
          $("#folder_window").hide();
        case 13: // enter
          node.select();
      }
    },
    onSelect: function(node, event) {
      node.activate();
    },
    onDblClick: function(node, event) {
      node.deactivate();
    }
  });


  /* Eventos de botões */
  
  /* Criar novo folder com texto padrao e foco para editar */
  $("#btn-new-folder").click(function() { 
    var node              = $("#tree").dynatree("getActiveNode");
    var new_folder_number = 0; // utilizado para cada nova pasta ter um nome diferente
    var new_folder_name   = '<%= I18n.t(:new_folder, scope: [:lessons, :files]) %>';

    if (node != null && node.data.isFolder) {

      while(validName(node, new_folder_name) == false){ // verifica se o nome já existe
        new_folder_number = new_folder_number+1;
        new_folder_name   = '<%= I18n.t(:new_folder, scope: [:lessons, :files]) %>'+new_folder_number; // Nova Pasta1, Nova Pasta2, ...
      }

      node.addChild({ title: new_folder_name, isFolder: true, focus: true }); // cria nó

      node_path = getPath(node);
      new_node  = node.getChildren()[node.getChildren().length-1]; // recupera último nó criado na pasta "pai"

      newFolder(new_node, node_path); // cria pasta no sistema

    }else
      flash_message("<%=I18n.t(:one_folder_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");

    return false;
  });

  /* Selecionar ou deselecionar todos os itens */
  $("#all_items_selector").click(function(){
    var value = $("#all_items_selector").attr("checked") == "checked";
    $("#tree").dynatree("getRoot").visit(function(node) {
      node.select(value);
    });
  });

  $("#btn-remove-node").click(function(){
    if(typeof selNodes == "undefined")
      flash_message("<%= I18n.t(:at_least_one, :to => I18n.t(:remove, :scope => [:lesson_files]), :scope => [:lesson_files]) %>", "alert", "flash_messages");
    else
      deleteNodes(selNodes); // deleta os nós que foram selecionados
  });

  $("#btn-clean-lesson").click(function(){
    deleteNodes([$("#tree").dynatree("getTree").getNodeByKey("_2")]); // deleta todos os nós
  });

  $("#btn-rename").click(function(){
    var active_node = $("#tree").dynatree("getActiveNode")
    if( active_node != null){
      if (selNodes.length == 1)
        editNode(selNodes[0]);
      else
        editNode(active_node);
    }else
      flash_message("<%=I18n.t(:item_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
  });

  $("#btn-move-node").click(function(){
    if(typeof selNodes == "undefined")
      flash_message("<%= I18n.t(:at_least_one, :to => I18n.t(:move, :scope => [:lesson_files]), :scope => [:lesson_files]) %>", "alert", "flash_messages");
    else
      $("#folder_window").toggle();
  });

  $("#btn-cancel-move").click(function(){
    $("#folder_window").hide();
  });  

  $("#btn-save-move").click(function(){
    saveMove(selNodes);
  });    

  $("#btn-conclude").click(function(){
    removeLightBox();
  });

  $("#btn-new-file").click(function(){
    var activeNode = $("#tree").dynatree("getActiveNode");
    if (activeNode != null && activeNode.data.isFolder == true)
      $("#fileupload").click();
    else
      flash_message("<%=I18n.t(:one_folder_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
  })

  $(':file').change(function(){

    var activeNode = $("#tree").dynatree("getActiveNode");

    for(var i=0; i < this.files.length; i++){ 
      file = this.files[i];
      extension = file.name.split(".");
      extension = extension[extension.length-1];
      if($.inArray(extension, extensions) != -1)
        var extension_error = true;
      else if(file.size > "<%=200.megabytes%>")
          var size_error = true
        else if(!validName(activeNode, file.name))
            var name_error = true

    }

    if(extension_error != true){
      if(size_error != true){
        if(name_error != true){

          var path     = getPath(activeNode);
          $("#path").attr("value", path);
          var formData = new FormData($('#file_form')[0]);

          $.ajax({
              url: $("#file_form").attr("action"),  //server script to process data
              type: 'PUT',
              data: formData,
              //Options to tell JQuery not to process data or worry about content-type
              cache: false,
              contentType: false,
              processData: false,
              // xhr: function() {  // custom xhr
              //     myXhr = $.ajaxSettings.xhr();
              //     if(myXhr.upload){ // check if upload property exists
              //         myXhr.upload.addEventListener('progress',progressHandlingFunction, false); // for handling the progress of the upload
              //     }
              //     return myXhr;
              // },
              success: function(data){
                $("#lesson_file_management").html(data);
              },
              error: function() {
                flash_message("<%=I18n.t(:upload_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
              }
          });

        }else
          flash_message("<%=I18n.t(:existing_file_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
      }else
        flash_message("<%=I18n.t(:file_too_big_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }else
      flash_message("<%=I18n.t(:bad_extension_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
  });

});

// function progressHandlingFunction(e){
//   if(e.lengthComputable){
//       $('progress').attr({value:e.loaded,max:e.total});
//   }
// }

/* Retorna o caminho em que o nó se encontra */
function getPath(node){
  var path = []; 
  if(node.data.key != "_2") // se não for raiz
    path.unshift(node.data.title); 
  node.visitParents(function(node){ 
    if(node.parent && node.data.key != "_2")  // se não for raiz
      path.unshift(node.data.title); // cada novo título do nó é adicionado ao começo 
  }); 
  return "/" + path.join("/"); 
}

/* Verifica se o nome do nó é um nome válido */
function validName(parent_node, name){
  var unique_name = true;
  if(parent_node.childList != null){
    for(var i = 0; i <= parent_node.childList.length-1; i++){
      if(parent_node.getChildren()[i].data.title == name) // verifica se nome escolhido já existe
        unique_name = false;
    }

  }
  return unique_name;
}

/* Função para excluir nós selecionados ou todos */
function deleteNodes(nodes){
  if( typeof nodes != "undefined" ){
    if(nodes[0].data.key != "_2"){ // remover selecionados
      if (confirm("<%=I18n.t(:delete_confirm, :scope => [:lesson_files])%>")){
        for (var i = 0; i < nodes.length; i++){
          if (nodes[i].li != null && nodes[i].data.key != '_2')
            saveDeletion(nodes[i], false);
        }
      }else
        return false;
    }else{ // remover todos
      if (confirm("<%=I18n.t(:clean_lesson_confirm, :scope => [:lesson_files])%>"))
        saveDeletion(nodes[0], true);
      else
        return false;
    }
  }else
    flash_message("<%=I18n.t(:items_must_be_selected, :scope => [:lesson_files])%>", "alert", "flash_messages");
}

/* Renomear nó */
function editNode(node) {
  
  if (node.data.key == '_2') // raiz visivel
    return false;

  var prevTitle = node.data.title,
  tree = node.tree;
  tree.$widget.unbind(); // Disable dynatree mouse- and key handling
  $(".dynatree-title", node.span).html("<input id='editNode' value='" + prevTitle + "'>"); // Replace node with <input>

  $("input#editNode") // Focus <input> and bind keyboard handler
    .focus()
    .keydown(function(event) {
      switch( event.which ) {
        case 27: // [esc]
          $("input#editNode").val(prevTitle); // discard changes on [esc]
          $(this).blur();
          break;
        case 13: // [enter]

          var new_title = $("input#editNode").val(); // Accept new value, when user leaves <input>
          node_path     = getPath(node); // recupera caminho do nó antes de mudar o título

          if(node.data.title != new_title){
            if(validName(node.parent, new_title) && new_title.length != 0){
              renameNode(node, new_title, node_path); // renomeia nó
              node.setTitle(new_title);
            }else{
              $("input#editNode").val(node.data.title); // retorna ao antigo título
              flash_message("<%=I18n.t(:name_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
            }             
          }else
            erase_flash_messages();

          $(this).blur(); // simulate blur to accept new value
          break;
      }
    }).blur(function(event){
      // Accept new value, when user leaves <input>
      var title = $("input#editNode").val();
      node.setTitle(title); 
      // Re-enable mouse and keyboard handlling
      tree.$widget.bind();
      node.focus();
    });

}

/**** Métodos AJAX ****/

/* Salva a deleção de um nó */
function saveDeletion(node, root_node){
  url       = $("#remove_path").attr("value"); // url para deleção
  node_path = getPath(node); // caminho do nó

  $.ajax({
    type: 'GET',
    url: url,
    data: {
      "path": node_path,
      "root_node": root_node // informa se é a deleção do nó raiz, ou seja, de todos os arquivos da aula
    },
    success: function(data) {
      $("#lesson_file_management").html(data);
    },
    error: function(data) {
      flash_message("<%=I18n.t(:delete_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  });
}

/* Cria pasta */
function newFolder(node, path){
  url = $("#btn-new-folder").attr("value");

  $.ajax({
    type: 'POST',
    url: url,
    data: {
      "path": path,
      "folder_name": node.data.title
    },
    success: function(data){
      $("#lesson_file_management").html(data);
    },
    error: function() {
      node.remove(); // remove pasta criada
      flash_message("<%=I18n.t(:new_folder_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  });
}

/* Renomeia nó */
function renameNode(node, new_title, path){
  url = $("#rename_path").attr("value");

  $.ajax({
    type: 'PUT',
    url: url,
    data: {
      "path": node_path,
      "node_name": new_title,
      "previous_name": node.data.title
    },
    success: function(data){
      $("#lesson_file_management").html(data);
    },
    error: function() {
      node.setTitle(node.data.title); // retorna ao antigo título
      flash_message("<%=I18n.t(:rename_error, :scope => [:lesson_files])%>", "alert", "flash_messages");
    }
  }); 
}

/* Salvar a movimentação de pastas/arquivos */
/* Trechos comentados serão utilizados quando a movimentação for possível para drag'n'drop */
function saveMove(nodesToMove){
  var paths = new Array;

  var nodesSelected = $("#folders_tree").dynatree("getTree").getSelectedNodes();
  if (nodesSelected.length == 0)
    var error = true; // erro: nenhuma pasta destino selecionada
  else{
    var moveTo = getPath(nodesSelected[0]);  

    for(var i=0; i < nodesToMove.length; i++){ 
      
      // verifica se está movendo para a pasta atual e o nome da pasta a ser movida (se não estiver mudando de pasta, não verifica nome)
      if(nodesToMove[i].parent.data.key == nodesSelected[0].data.key || validName(nodesSelected[0], nodesToMove[i].data.title)){ 
        if( nodesToMove[i].data.key == nodesSelected[0].data.key ) 
          var same_folder = true; // erro: está movendo para ela mesma
        else{
          paths.push(getPath(nodesToMove[i])); // caminho do nó
          if(nodesToMove[i].countChildren() > 0) // verifica se é um nó pai selecionado
            i = i + nodesToMove[i].countChildren(); // pula filhos
        }
      }else{
        var invalid_name = true; // erro: já existe pasta de mesmo nome no destino
        i = nodesToMove.length; // concluir laço
      }

    }

  }

  if(error == true)
    flash_message("<%= I18n.t(:destination_folder_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
  else{
    if(invalid_name == true) 
      flash_message("<%= I18n.t(:existing_folder_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
    else{
      if(same_folder == true) 
        flash_message("<%= I18n.t(:same_folder_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
      else{
        $.ajax({
          type: 'PUT',
          url: $("#move_path").attr("value"),
          data: {
            "paths_to_move": paths,
            "path_to_move_to": moveTo
          },
          success: function(data) {
            $("#lesson_file_management").html(data);
          },
          error: function() {
            flash_message("<%= I18n.t(:move_error, :scope => [:lesson_files]) %>", "alert", "flash_messages");
          }
        });
      }
    }
  }

}