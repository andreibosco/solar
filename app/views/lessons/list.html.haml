= javascript_include_tag "tooltip"

.list_lessons
  = hidden_field_tag(:allocation_tags_ids, params[:allocation_tags_ids]) 
  = button_tag t(".new_module"), class: 'btn btn_default', id: "new_module", :'data-link-new-module' => new_lesson_module_path(:allocation_tags_ids => params[:allocation_tags_ids]), :'data-tooltip' => t(".new_module")

  - previous_allocation_tag = nil

  - @allocation_tags.each_with_index do |allocation_tag, idxat|

    /- allocation_tag_path = allocation_tag_path(allocation_tag, @what_was_selected)
    / aqui tinha um .list_lessons
    .block_wrapper
      - unless previous_allocation_tag == idxat
        - previous_allocation_tag = idxat
        /.edition_allocation_tag_path= allocation_tag_path

      - unless allocation_tag.lesson_modules.empty?
        - allocation_tag.lesson_modules.each_with_index do |lesson_module, idxm|

          - lessons = lessons_by_module(lesson_module.id)
          / aqui tinha um .list_lessons
          .block_wrapper.module
            .block_title
              %h2
                = lesson_module.name
                = link_to (content_tag(:i, nil, :class=>'icon-edit')), "#", class: 'block_title_button edit_module', :'data-link-edit-module' => edit_lesson_module_path(lesson_module, allocation_tags_ids: params[:allocation_tags_ids]), :'data-tooltip' => t(".edit_lesson_module")
                = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", class: 'block_title_button delete_module', :'data-link-delete' => lesson_module_path(lesson_module, allocation_tags_ids: params[:allocation_tags_ids]), :'data-tooltip' => t(".delete_lesson_module")
            .block_content_toolbar
              .block_toolbar_left.btn-group
                %a.btn.btn_main{:href => "#", 'data-dropdown' => "#dropdown_#{lesson_module.id}"}
                  = content_tag(:i, nil, :class=>'icon-plus-3')
                  %i.icon-arrow-down-3
                %div{:id=>"dropdown_#{lesson_module.id}", :class=>"dropdown dropdown-tip"}
                  %ul.dropdown-menu
                    %li
                      = link_to (t(:new_lesson, scope: [:lessons, :list])), "#", id: "new_lesson", :'data-link-new-lesson' => new_lesson_path(lesson_module_id: lesson_module.id, allocation_tags_ids: params[:allocation_tags_ids]), :'data-tooltip' => t(:new_lesson, scope: [:lessons, :list])
                    %li
                      = link_to "Importar aula", "#", onclick: "javascript: alert('importar aula');", id: 'import_lesson'
              .block_toolbar_right
                .btn-group

                  = link_to (content_tag(:i, nil, :class=>'icon-move')), "#", :class => 'btn', id: "move_lesson_from_#{lesson_module.id}", :'data-tooltip' => t(".move_lesson"), "data-dropdown-alt" => "#move_lesson_dropdown_#{lesson_module.id}", disabled: true
                  #lesson_dropdown.dropdown-alt.dropdown-tip
                    .dropdown-panel
                      #dropdown_alert{:style => "display: block"}
                        = form_for(:lesson, :url => change_module_lesson_path(lesson_module.id), :html => {:id => "form_change_module_#{lesson_module.id}" }) do |f|
                          = hidden_field_tag "lessons_to_move_#{lesson_module.id}"
                          = hidden_field_tag "allocation_tags_ids", params[:allocation_tags_ids]
                          %ul
                          - allocation_tag.lesson_modules.each_with_index do |lmodule, idx|
                            - unless idx == idxm
                              %li
                                %span{style: "display: inline"}
                                  = radio_button_tag(:move_to_module, lmodule.id)
                                  = lmodule.name
                        .control_buttons{align: "right"}
                          = button_tag t(".cancel"), type: :button, :class => 'btn', id: "btn-cancel-move-#{lesson_module.id}"
                          = button_tag t(".move"), type: :button, :class => 'btn btn_main', id: "btn-save-move-#{lesson_module.id}"

                  = link_to (content_tag(:i, nil, :class=>'icon-edit')), "#", onclick: "javascript: edit_lesson('#{lesson_module.id}');", id: 'edit_lesson', class: 'btn', :'data-tooltip' => t(".edit_lesson")
                  = link_to (content_tag(:i, nil, :class=>'icon-archive')), "#", onclick: "", class: 'btn btn_default manage_files_lesson', :value => lesson_module.id, :'data-tooltip' => t(".manage_files")
                  = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", onclick:  "javascript: delete_lesson('#{lesson_module.id}');", id: 'delete_lesson', class: 'btn', :'data-tooltip' => t(".delete_lesson")
                  = link_to (content_tag(:i, nil, :class=>'icon-install')), "#", onclick: "javascript: download_lesson_zip('#{lesson_module.id}');", id: 'download_lesson', class: 'btn', :'data-tooltip' => t(".download_zip")
                  = link_to (content_tag(:i, nil, :class=>'icon-checkmark')), "#", id: 'release_lessons', class: 'btn', "data-module_id" => lesson_module.id, :'data-tooltip' => t(".release")
            / Lessons list
            %table.tb_list
              %thead
                %tr.lines
                  - unless lessons.nil? or lessons.empty?
                    %th{style: 'text-align:center;'}
                      = check_box_tag( 'all', 'all', false, {id: "all_m_#{lesson_module.id}", class: 'lesson_check_all'} )
                    %th{style: 'text-align:center;'}= t(".order")
                    %th= t(".name")
                    %th{style: 'text-align:center;'}= t(".availability")
                    %th{style: 'text-align:center;'}= t(".acceptance")

              %tbody
                - unless lessons.nil? or lessons.empty?
                  - lessons.each_with_index do |lesson, idxl|

                    %tr.lines{lesson_name: lesson.name, lesson_id: lesson.id, lesson_order: lesson.order, lesson_status: lesson.status}
                      %td{style: "width: 25px;", align: 'center' }
                        = check_box_tag( "m_#{lesson_module.id}", lesson.id, false, {class: "m_#{lesson_module.id}", file_type: (lesson.type_lesson == Lesson_Type_File)} )
                      %td{style: "width: 50px;", align: 'center'}
                        .lesson_arrows
                          .lesson_arrow_up
                            = link_to (image_tag "lesson/up_arrow.png"), "#", class: 'up'
                          .lesson_arrow_down
                            = link_to (image_tag "lesson/down_arrow.png"), "#", class: 'down'

                      %td
                        %div
                          = link_to lesson.name, "#", {onclick: "javascript: alert('abre aula');", id: "lesson#{lesson.id}", class: 'link_content' }
                        - if lesson.description
                          %div
                            = lesson.description

                      %td{style: "width: 160px", align: 'center'}
                        = t(".since") unless !lesson.schedule.end_date.nil?
                        = l(lesson.schedule.start_date, format: :normal)
                        = ' - '
                        - if lesson.has_end_date?
                          = l(lesson.schedule.end_date, format: :normal)
                        - else
                          = t(:no_end_date, scope: [:lessons, :list])

                      %td{style: "width: 70px", align: 'center'}
                        = link_to (image_tag "lesson/#{(lesson.status == Lesson_Test) ? 'rejected' : 'released'}_lesson.png"), "#", class: 'change_lesson_status', "data-lesson_id" => lesson.id, "data-status_to" => [Lesson_Test, Lesson_Approved].delete_if {|v| v == lesson.status}
                - else
                  %tr.lines
                    %td.lesson_description{colspan:  5}
                      = t(:none, scope: [:lessons, :list])

      - else
        .block_content.block_content_text 
          = t(:none, scope: [:lesson_modules])

:javascript

  $(document).ready(function() {

    $(':checkbox[name^="m_"]').click(function(){
      var count_ckb_selected = $(':checkbox[name^="'+$(this).attr("name")+'"]:checked').length;
      var count_modules      = $('.tb_list').length;
      var module_id          = $(this).attr("name").split("_")[1];
      var move_button        = $('#move_lesson_from_'+module_id);
      if(count_ckb_selected > 0 && count_modules > 1)
        move_button.attr('disabled', false);
      else{
        move_button.attr('disabled', true);      
        $($(move_button.parent()).children('#lesson_dropdown')).hide(); // oculta dropdown
      }
    });

    $('[id^="move_lesson_from_"]').click(function(){
      var dropdown_div  = $($(this).parent()).children('#lesson_dropdown');
      var module_id     = $(this).attr("id").split('_')[3];
      var checked_boxes = $(':checkbox[name^="m_'+module_id+'"]:checked');

      if($(this).attr("disabled") == "disabled" || checked_boxes.length < 1){
        $(dropdown_div).hide();
        flash_message("#{I18n.t(:one_lesson_must_be_selected, :scope => [:lessons, :errors])}", 'alert'); // mensagem de erro  
      }else
        $(dropdown_div).toggle();
    });

    $('[id^="btn-cancel-move-"]').click(function(){
      $($(this).get(0).parentNode.parentNode.parentNode.parentNode).hide();
    });

    $('[id^="btn-save-move-"]').click(function(){
      
      var module_id     = $(this).attr("id").split('-')[3];
      var checked_boxes = $(':checkbox[name^="m_'+module_id+'"]:checked');
      checked_boxes     = jQuery.map(checked_boxes, function(n){ return ($(n).attr("value")); });

      if(checked_boxes.length < 1){ // se nenhuma aula foi selecionada
        flash_message("#{I18n.t(:one_lesson_must_be_selected, :scope => [:lessons, :errors])}", 'alert');
      } else if($("#form_change_module_"+module_id+" input[type='radio']:checked").length < 1) // se nenhum mÃ³dulo foi selecionado
        flash_message("#{I18n.t(:one_module_must_be_selected, :scope => [:lessons, :errors])}", 'alert');
      else{
        $("#lessons_to_move_"+module_id).val(checked_boxes);
        submit_form('form_change_module_'+$(this).attr("id").split('-')[3], 'list_lessons', "#{list_lessons_path(:allocation_tags_ids => @allocation_tags_ids)}", 'list_lessons', 'PUT');
      }

    });

    $('#release_lessons').click(function(){
      $('#lesson_dropdown').hide();
      var lesson_ids = get_selected_lessons($(this).attr('data-module_id'));
      if (lesson_ids == "")
        return false;

      var url = "#{change_status_lesson_path(':id', Lesson_Approved, allocation_tags_ids: params[:allocation_tags_ids])}".replace(':id', lesson_ids);
      update_object(url, '#{list_lessons_path(allocation_tags_ids: @allocation_tags_ids)}');

      return false;
    });

    $('.change_lesson_status').click(function() {
      $('#lesson_dropdown').hide();
      var lesson_id = $(this).attr('data-lesson_id');
      var status_to = $(this).attr('data-status_to');
      var url = "#{change_status_lesson_path(':id', ':status', allocation_tags_ids: params[:allocation_tags_ids])}".replace(':id', lesson_id).replace(':status', status_to);

      update_object(url, '#{list_lessons_path(allocation_tags_ids: @allocation_tags_ids)}');

      return false;
    });

    $(".up, .down").click(function() {
      $('#lesson_dropdown').hide();
      var row = $(this).parents("tr:first");
      var id1 = row.attr('lesson_id');

      if ($(this).is(".up")) {
        if (row.prev().attr('lesson_order') == undefined) return false;

        var id2 = row.prev().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.ajax({
          type: 'PUT',
          url: url,
          success: function() { row.insertBefore(row.prev()); }
        });
      } else { // down
        if (row.next().attr('lesson_order') == undefined) return false;

        var id2 = row.next().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.ajax({
          type: 'PUT',
          url: url,
          success: function(data, t, x) { row.insertAfter(row.next()); }
        });
      }
      return false;
    });

    $(".lesson_check_all").click(function() {
      var check  = this.checked;
      var module = this.id.slice(4);
      $("."+module).each(function(i) {
          $(this).attr("checked",check);
      });
    });

    $("#new_module").click(function(){
      $('#lesson_dropdown').hide();
      showLightBoxURL($(this).data('link-new-module'), 500, 400, true, $(this).data('tooltip'));
    });

    $(".edit_module").click(function(){
      $('#lesson_dropdown').hide();
      showLightBoxURL($(this).data('link-edit-module'), 500, 400, true, $(this).data('tooltip'));
    });

    $(".delete_module").click(function(){
      $('#lesson_dropdown').hide();
      $(this).nice_delete({parent: 'div.module'});
    });

    $("#new_lesson").click(function(){
      showLightBoxURL($(this).data('link-new-lesson'), 550, 270, true, $(this).data('tooltip'));
    });

    $(".manage_files_lesson").click(function(){
      $('#lesson_dropdown').hide();
      var selected_lessons = get_selected_lessons($(this).attr('value'));
      if(selected_lessons.length == 1){
        lesson_has_file_type = $( "input:checked" ).attr("file_type");
        if(lesson_has_file_type == "true"){
          url = "#{lesson_files_path(lesson_id: 'lessons_ids')}".replace('lessons_ids', selected_lessons[0])
          showLightBoxURL(url, 550, 317, true, "#{I18n.t(:files_management, scope: [:lesson_files])}");
        }else
          alert("#{I18n.t(:lesson_must_have_file_type, scope: [:lesson_files])}");
      }else
        alert("#{I18n.t(:one_lesson_must_be_selected, scope: [:lesson_files])}");
    });

  });

  // funÃ§Ã£o que retorna uma lista de ids das aulas selecionadas em determinado mÃ³dulo
  function get_selected_lessons(module_id){
    lessons_ids = new Array;
    module_check_boxes = $('[name="m_'+module_id+'"]');
    // coloca, no array, todos os ids das aulas selecionadas para efetuar a aÃ§Ã£o do mÃ³dulo
    module_check_boxes.map(function(){
      if(this.checked == true){ lessons_ids.push(this.value) }
    });
    return lessons_ids;
  }

  // verifica se pode realizar a aÃ§Ã£o (nÃ£o permitirÃ¡ e exibirÃ¡ alerta se nenhuma aula tiver sido selecionada)
  function can_do_action(selected_lessons){
    if(selected_lessons.length == 0){
      alert('#{I18n.t(:must_select_lessons, scope: [:lessons, :notifications])}');
      return false;
    }else
      return true;
  }

  // download dos arquivos das aulas selecionadas em um mÃ³dulo
  function download_lesson_zip(module_id){
    var allocation_tags_ids = $("#allocation_tags_ids").val();
    var lessons_ids         = get_selected_lessons(module_id);

    if(can_do_action(lessons_ids)){
      jQuery.ajax({
        url: "#{verify_download_lessons_path}",
        type: "GET",
        data: {
          "lessons_ids": lessons_ids,
          "allocation_tags_ids": allocation_tags_ids
        },
        success: function(){
          url = "#{download_files_lessons_path(lessons_ids: 'l_ids', allocation_tags_ids: params[:allocation_tags_ids])}".replace('l_ids', lessons_ids);
          window.location.href = url;
        },
        error: function() {
          alert("#{I18n.t(:invalid_lesson_to_download, :scope => [:lessons, :errors])}");
        }
      });
    }
  }

  function edit_lesson(module_id){
    $('#lesson_dropdown').hide();
    lessons_ids = get_selected_lessons(module_id);
    allocation_tags_ids = $("#allocation_tags_ids").val();
    there_tab = lessons_ids.length > 1 ? true : false;
    
    if (!there_tab) {
      if (lessons_ids.length == 1) {
        var url = "#{edit_lesson_path(':id', :allocation_tags_ids => params[:allocation_tags_ids])}".replace(':id', lessons_ids);
        open_lightbox(url, "#{t(:edit_lesson, scope: [:lessons, :list])}", 550, 270);

      } else
        alert('#{I18n.t(:must_select_a_lesson, scope: [:lessons, :notifications])}');
    } else
      alert('#{I18n.t(:select_only_a_lesson, scope: [:lessons, :notifications])}');
  }

  function delete_lesson(module_id){
    lessons = get_selected_lessons(module_id);
    allocation_tags_ids = $("#allocation_tags_ids").val();

    if (lessons.length == 1){
      delete_object( "#{lesson_path(':id', :allocation_tags_ids => params[:allocation_tags_ids])}".replace(':id', lessons), '#{list_lessons_path(:allocation_tags_ids => @allocation_tags_ids)}'); 
      if ($('[name="m_'+module_id+'"]:checked').parents('tr').attr('lesson_status') == "1") {
        alert('#{I18n.t(:cant_delete, scope: [:lessons, :errors])}');
      }  
    } else {
       if(lessons.length <1){
          alert('#{I18n.t(:must_select_a_lesson, scope: [:lessons, :notifications])}');
        } else{
          alert('#{I18n.t(:select_only_a_lesson, scope: [:lessons, :notifications])}');
        }  
    }
  }