= javascript_include_tag "tooltip"

.list_lessons{:"data-link-list" => list_lessons_path(allocation_tags_ids: @allocation_tags_ids)}
  = hidden_field_tag(:allocation_tags_ids, params[:allocation_tags_ids]) 
  = button_tag t(".new_module"), class: 'btn btn_default new_module', :'data-link-new-module' => new_lesson_module_path(:allocation_tags_ids => params[:allocation_tags_ids]), :'data-tooltip' => t(".new_module")

  - previous_allocation_tag = nil

  - @allocation_tags.each_with_index do |allocation_tag, idxat|

    /- allocation_tag_path = allocation_tag_path(allocation_tag, @what_was_selected)
    / aqui tinha um .list_lessons
    .block_wrapper
      - unless previous_allocation_tag == idxat
        - previous_allocation_tag = idxat
        /.edition_allocation_tag_path= allocation_tag_path

      - unless allocation_tag.lesson_modules.empty?
        - allocation_tag.lesson_modules.each_with_index do |lesson_module, idxm|

          - lessons = lessons_by_module(lesson_module.id)
          / aqui tinha um .list_lessons
          .block_wrapper.module
            .block_title
              %h2
                = lesson_module.name
                = link_to (content_tag(:i, nil, :class=>'icon-edit')), "#", class: 'block_title_button edit_module', :'data-link-edit-module' => edit_lesson_module_path(lesson_module, allocation_tags_ids: params[:allocation_tags_ids]), :'data-tooltip' => t(".edit_lesson_module")
                = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", class: 'block_title_button delete_module', :'data-link-delete' => lesson_module_path(lesson_module, allocation_tags_ids: params[:allocation_tags_ids]), :'data-tooltip' => t(".delete_lesson_module"), :"data-module-id" => lesson_module.id
            .block_content_toolbar
              .block_toolbar_left.btn-group
                %a.btn.btn_main{:href => "#", 'data-dropdown' => "#dropdown_#{lesson_module.id}"}
                  = content_tag(:i, nil, :class=>'icon-plus-3')
                  %i.icon-arrow-down-3
                %div{:id=>"dropdown_#{lesson_module.id}", :class=>"dropdown dropdown-tip"}
                  %ul.dropdown-menu
                    %li= link_to (t(:new_lesson, scope: [:lessons, :list])), "#", class: "new_lesson", :'data-link-new-lesson' => new_lesson_path(lesson_module_id: lesson_module.id, allocation_tags_ids: params[:allocation_tags_ids]), :'data-tooltip' => t(:new_lesson, scope: [:lessons, :list])
                    %li= link_to "Importar aula", "#", onclick: "javascript: alert('importar aula');", id: 'import_lesson'
              .block_toolbar_right
                .btn-group{class: "module-#{lesson_module.id}"}
                  = link_to (content_tag(:i, nil, :class=>'icon-move')), "#", :class => 'btn', id: "move_lesson_from_#{lesson_module.id}", :'data-tooltip' => t(".move_lesson"), "data-dropdown-alt" => "#move_lesson_dropdown_#{lesson_module.id}", disabled: true
                  #lesson_dropdown.dropdown-alt.dropdown-tip
                    .dropdown-panel
                      #dropdown_alert{:style => "display: block"}
                        %ul
                        - allocation_tag.lesson_modules.each_with_index do |lmodule, idx|
                          - unless idx == idxm
                            %li
                              %span{style: "display: inline"}
                                = radio_button_tag(:move_to_module, lmodule.id)
                                = lmodule.name
                        .control_buttons{align: "right"}
                          = button_tag t(".cancel"), type: :button, class: 'btn', id: "btn-cancel-move-#{lesson_module.id}"
                          = button_tag t(".move"), type: :button, class: 'btn btn_main move_lessons', :"data-module-id" => lesson_module.id, :"data-link-move" => change_module_lesson_path(id: lesson_module.id, allocation_tags_ids: @allocation_tags_ids, lessons_ids: 'lessons_param', move_to_module: 'module_param')
                  = link_to (content_tag(:i, nil, :class=>'icon-edit')), "#", class: 'btn edit_lesson btn_edit', :'data-tooltip' => t(".edit_lesson"), :"data-module-id" => lesson_module.id, :"data-link-edit" => edit_lesson_path(id: ':id', allocation_tags_ids: @allocation_tags_ids)
                  = link_to (content_tag(:i, nil, :class=>'icon-archive')), "#", class: 'btn btn_default manage_files_lesson', :"data-module-id" => lesson_module.id, :'data-tooltip' => t(".manage_files"), :"data-link-manage" => lesson_files_path(lesson_id: 'lessons_ids'), :"data-single" => true
                  = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", class: 'btn delete_lesson btn_del', :'data-tooltip' => t(".delete_lesson"), :'data-link-delete' => lesson_path(id: ':id', allocation_tags_ids: @allocation_tags_ids), :'data-module_id' => lesson_module.id
                  = link_to (content_tag(:i, nil, :class=>'icon-install')), "#", class: 'btn download_lesson_zip', :'data-tooltip' => t(".download_zip"), :"data-link-verify" => verify_download_lessons_path(lessons_ids: "lessons_param", allocation_tags_ids: @allocation_tags_ids), :"data-link-download" => download_files_lessons_path(lessons_ids: 'lessons_param', allocation_tags_ids: @allocation_tags_ids), :"data-module-id" => lesson_module.id
                  = link_to (content_tag(:i, nil, :class=>'icon-checkmark')), "#", class: 'btn release_lessons', :"data-module-id" => lesson_module.id, :'data-tooltip' => t(".release"), :"data-link-update" => change_status_lesson_path(id: ':id', status: Lesson_Approved, allocation_tags_ids: @allocation_tags_ids)
            / Lessons list
            %table.tb_list{:"data-default-module" => lesson_module.is_default, class: "table-module-#{lesson_module.id}"}
              %thead
                %tr.lines
                  - unless lessons.nil? or lessons.empty?
                    %th{style: 'text-align:center;'}= check_box_tag( 'all', 'all', false, {id: "all_m_#{lesson_module.id}", class: 'lesson_check_all', :"data-children-names" => "m_#{lesson_module.id}"} )
                    %th{style: 'text-align:center;'}= t(".order")
                    %th= t(".name")
                    %th{style: 'width: 5%; text-align:center;'}= t(".type")
                    %th{style: 'text-align:center;'}= t(".availability")
                    %th{style: 'text-align:center;'}= t(".acceptance")

              %tbody
                - unless lessons.nil? or lessons.empty?
                  - lessons.each_with_index do |lesson, idxl|

                    %tr.lines{lesson_name: lesson.name, lesson_id: lesson.id, lesson_order: lesson.order, lesson_status: lesson.status}
                      %td{style: "width: 25px;", align: 'center' }
                        = check_box_tag( "m_#{lesson_module.id}", lesson.id, false, {class: "m_#{lesson_module.id}", :"data-file-type" => (lesson.type_lesson == Lesson_Type_File) })
                      %td{style: "width: 50px;", align: 'center'}
                        .lesson_arrows
                          .lesson_arrow_up= link_to (image_tag "lesson/up_arrow.png"), "#", class: 'up'
                          .lesson_arrow_down= link_to (image_tag "lesson/down_arrow.png"), "#", class: 'down'

                      %td
                        %div= link_to lesson.name, "#", {onclick: "javascript: alert('abre aula');", id: "lesson#{lesson.id}", class: 'link_content' }
                        - if lesson.description
                          %div= lesson.description

                      %td= (lesson.type_lesson == Lesson_Type_File ? t(".file_type") : t(".link_type"))

                      %td{style: "width: 160px", align: 'center'}
                        = t(".since") unless not(lesson.schedule.end_date.nil?)
                        = [l(lesson.schedule.start_date, format: :normal), (lesson.has_end_date? ? l(lesson.schedule.end_date, format: :normal) : t(:no_end_date, scope: [:lessons, :list]))].join(" - ")

                      %td{style: "width: 70px", align: 'center'}
                        - status = [Lesson_Test, Lesson_Approved].delete_if {|v| v == lesson.status}
                        = link_to (image_tag "#{(lesson.status == Lesson_Test) ? 'rejected' : 'released'}.png"), "#", id: 'change_lesson_status', :"data-link-update" => change_status_lesson_path(id: lesson.id, status: status, allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => (lesson.status == Lesson_Test ?  t(".draft") :  t(".released"))
                - else
                  %tr.lines
                    %td.lesson_description{colspan: 5}= t(:none, scope: [:lessons, :list])

      - else
        .block_content.block_content_text= t(:none, scope: [:lesson_modules])

:javascript

  $(function() {

    $(".btn_edit, .btn_del, .release_lessons, .download_lesson_zip, .manage_files_lesson").attr("disabled", true);

    $('.lesson_check_all').nice_checkbox({
      objects_to_change_status: $('.manage_files_lesson, .download_lesson_zip, .release_lessons'),
      can_enable_elements: true
    });

    $(':checkbox[name^="m_"]').click(function(){
      var count_ckb_selected = $(':checkbox[name^="'+$(this).attr("name")+'"]:checked').length;
      var count_modules      = $('.tb_list').length;
      var module_id          = $(this).attr("name").split("_")[1];
      var move_button        = $('#move_lesson_from_'+module_id);
      if(count_ckb_selected > 0 && count_modules > 1)
        move_button.attr('disabled', false);
      else{
        move_button.attr('disabled', true);      
        $($(move_button.parent()).children('#lesson_dropdown')).hide(); // oculta dropdown
      }
    });

    $('[id^="move_lesson_from_"]').click(function(){
      var dropdown_div  = $($(this).parent()).children('#lesson_dropdown');
      var module_id     = $(this).attr("id").split('_')[3];
      var checked_boxes = $(':checkbox[name^="m_'+module_id+'"]:checked');

      if($(this).attr("disabled") == "disabled" || checked_boxes.length < 1){
        $(dropdown_div).hide();
        flash_message("#{I18n.t(:one_lesson_must_be_selected, :scope => [:lessons, :errors])}", 'alert'); // mensagem de erro  
      }else
        $(dropdown_div).toggle();
    });

    $('[id^="btn-cancel-move-"]').click(function(){
      $($(this).get(0).parentNode.parentNode.parentNode.parentNode).hide();
    });

    $(".move_lessons").click(function(){
      erase_flash_messages();
      var module_id = $(this).data("module-id");
      var lesson_ids = get_selected_lessons(module_id);
      var destination_module = $("input[name='move_to_module']:checked", ".module-"+module_id);

      if(!lessons_ids.length)
        flash_message("#{I18n.t(:must_select_lessons, scope: [:lessons, :notifications])}", 'alert');
      else if(destination_module.length < 1) // se nenhum módulo destino foi selecionado
        flash_message("#{I18n.t(:must_select_module, scope: [:lessons, :errors])}", 'alert'); 
      else{
        var url = $(this).data('link-move').replace('lessons_param', lesson_ids).replace('module_param', destination_module.val()).replace("undefined", "");

        $.put(url, function(data){
          flash_message(data.msg, 'notice');

          $.get($('.list_lessons').data('link-list'), function(data){
            $('.list_lessons:first').replaceWith(data);
          });
        }).error(function(data){
          flash_message(data.msg, 'alert');
        });

      }

    });

    $('#change_lesson_status, .release_lessons').click(function() {
      erase_flash_messages();
      $('#lesson_dropdown').hide();

      var module_id = $(this).data("module-id");
      var url = $(this).data("link-update");

      if(typeof(module_id) != "undefined"){
        var lesson_ids = get_selected_lessons($(this).data('module-id'));
        if (lesson_ids == "")
          return false;
        url = url.replace(':id', lesson_ids);
      }

      $.put(url, function(data){
        $.get($('.list_lessons').data('link-list'), function(data){
          $('.list_lessons:first').replaceWith(data);
        });
      }).error(function(data) {
        if (typeof(data.responseText) != "undefined")
          flash_message(JSON.parse(data.responseText).msg, 'alert');

        if(typeof(module_id) != "undefined"){
          $.get($('.list_lessons').data('link-list'), function(data){
            $('.list_lessons:first').replaceWith(data);
          });
        }
      });

      return false;
    });

    $(".up, .down").click(function() {
      $('#lesson_dropdown').hide();
      var row = $(this).parents("tr:first");
      var id1 = row.attr('lesson_id');

      if ($(this).is(".up")) {
        if (row.prev().attr('lesson_order') == undefined) return false;

        var id2 = row.prev().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.put(url, function(){ row.insertBefore(row.prev()); });

      } else { // down
        if (row.next().attr('lesson_order') == undefined) return false;

        var id2 = row.next().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.put(url, function(data, t, x){ row.insertAfter(row.next()); });
      }
      return false;
    });

    $(".new_module").click(function(){
      $('#lesson_dropdown').hide();
      showLightBoxURL($(this).data('link-new-module'), 500, 400, true, $(this).data('tooltip'));
    });

    $(".edit_module").click(function(){
      $('#lesson_dropdown').hide();
      showLightBoxURL($(this).data('link-edit-module'), 500, 400, true, $(this).data('tooltip'));
    });

    $(".delete_module").click(function(){
      $('#lesson_dropdown').hide();

      $(this).nice_delete({
        parent: 'div.module',
        complement_success: function(data){
          $.get($('.list_lessons').data('link-list'), function(data){
            $('.list_lessons:first').replaceWith(data);
          });
        }
      });
    });

    $(".new_lesson").click(function(){
      showLightBoxURL($(this).data('link-new-lesson'), 550, 270, true, $(this).data('tooltip'));
    });

    $(".manage_files_lesson").click(function(){
      $('#lesson_dropdown').hide();
      var module_id = $(this).data('module-id');
      var selected_lessons = get_selected_lessons(module_id);

      if(selected_lessons.length == 1){
        lessons_with_file_type = $("input.m_"+module_id+":checked[data-file-type='true']");
        if(lessons_with_file_type.length == selected_lessons.length){
          url = $(this).data("link-manage").replace('lessons_ids', selected_lessons[0])
          showLightBoxURL(url, 550, 317, true, "#{I18n.t(:files_management, scope: [:lesson_files])}");
        }else
          alert("#{I18n.t(:lesson_must_have_file_type, scope: [:lesson_files])}");
      }else
        alert("#{I18n.t(:one_lesson_must_be_selected, scope: [:lesson_files])}");
    });

    $(".delete_lesson").click(function(){
      var lessons = get_selected_lessons($(this).data("module_id"));

      if (lessons.length){
        $(this).nice_delete({
          url: $(this).data("link-delete").replace(':id', lessons),
          complement_success: function() {
            $.get($('.list_lessons').data('link-list'), function(data){
              $('.list_lessons:first').replaceWith(data);
            });
          }
        });
      } else
        alert('#{I18n.t(:must_select_a_lesson, scope: [:lessons, :notifications])}');
    });


    // download dos arquivos das aulas selecionadas em um módulo
    $(".download_lesson_zip").click(function(){
      var lessons = get_selected_lessons($(this).data("module-id"));
      var link_download = $(this).data("link-download").replace('lessons_param', lessons);

      if(can_do_action(lessons_ids)){
        jQuery.ajax({
          url: $(this).data("link-verify").replace('lessons_param', lessons),
          type: "GET",
          success: function(){
            window.location.href = link_download;
          },
          error: function() {
            alert("#{I18n.t(:invalid_lesson_to_download, :scope => [:lessons, :errors])}");
          }
        });
      }
    });

    $(".edit_lesson").click(function(){
      var selected_lessons = get_selected_lessons($(this).data('module-id'));

      if(selected_lessons.length == 1){
        url = $(this).data("link-edit").replace(':id', selected_lessons[0])
        showLightBoxURL(url, 550, 270, true, $(this).data("tooltip"));
      }else
        alert("#{I18n.t(:one_lesson_must_be_selected, scope: [:lesson_files])}");
    });

  });

  // função que retorna uma lista de ids das aulas selecionadas em determinado módulo
  function get_selected_lessons(module_id){
    lessons_ids = new Array;
    module_check_boxes = $('[name="m_'+module_id+'"]');
    // coloca, no array, todos os ids das aulas selecionadas para efetuar a ação do módulo
    module_check_boxes.map(function(){
      if(this.checked == true){ lessons_ids.push(this.value) }
    });
    return lessons_ids;
  }

  // verifica se pode realizar a ação (não permitirá e exibirá alerta se nenhuma aula tiver sido selecionada)
  function can_do_action(selected_lessons){
    if(selected_lessons.length == 0){
      alert('#{I18n.t(:must_select_lessons, scope: [:lessons, :notifications])}');
      return false;
    }else
      return true;
  }
    