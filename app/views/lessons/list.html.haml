= javascript_include_tag "tooltip"

.list_lessons{:"data-link-list" => list_lessons_path(allocation_tags_ids: @allocation_tags_ids, offer_id: params[:offer_id])}
  = hidden_field_tag(:allocation_tags_ids, params[:allocation_tags_ids])

  = link_to t(".new_module"), new_lesson_module_path(allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => t(".new_module"), class: "btn btn_default link_new_module", id: "new-discussion" 
  
  - all_groups = Offer.find(params[:offer_id]).try(:groups) if params.include?(:offer_id)

  - unless @academic_allocations.empty?
    - @academic_allocations.each_with_index do |academic_allocation, idxm|

      - lesson_module = LessonModule.find(academic_allocation.academic_tool_id)
      - lessons       = lessons_by_module(lesson_module.id)
      - has_group     = AllocationTag.find(academic_allocation.allocation_tag_id).group
      .block_wrapper.module{id: "module_#{lesson_module.id}"}
        .block_title_module.block_module
          %h2
            = lesson_module.name
            .block_buttons
              = link_to (content_tag(:i, nil, :class=>'icon-edit')), edit_lesson_module_path(lesson_module, allocation_tags_ids: @allocation_tags_ids), class: 'block_title_button edit_module', :'data-tooltip' => t(".edit_lesson_module")
              = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", class: 'block_title_button delete_module', :'data-link-delete' => lesson_module_path(lesson_module, allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => t(".delete_lesson_module"), :"data-module-id" => lesson_module.id
          -if has_group
            - unless lesson_module.is_default
              = render "groups/groups_tags", all_groups: all_groups, groups: lesson_module.groups, tool: lesson_module, paths: {add: add_group_to_lesson_modules_path(id: "param_id", tool_id: lesson_module.id), remove: remove_group_from_lesson_modules_path(id: "param_id", tool_id: lesson_module.id), unbind: unbind_group_from_lesson_modules_path(id: "param_id", tool_id: lesson_module.id)}
            - else
              .input.groups_tags
                = t(".group")
                %span.collection_check_boxes= lesson_module.groups.first.code
        .block_content_toolbar
          .block_toolbar_left.btn-group
            %a.btn.btn_main{:href => "#", 'data-dropdown' => "#dropdown_#{lesson_module.id}"}
              = content_tag(:i, nil, :class=>'icon-plus')
              %i.icon-arrow-down-triangle
            %div{:id=>"dropdown_#{lesson_module.id}", :class=>"dropdown dropdown-tip"}
              %ul.dropdown-menu
                %li= link_to (t(:new_lesson, scope: [:lessons, :list])), new_lesson_path(lesson_module_id: lesson_module.id, allocation_tags_ids: @allocation_tags_ids), class: "link_new_lesson"
                %li= link_to "Importar aula", "#", onclick: "javascript: alert('importar aula');", id: 'import_lesson'
          .block_toolbar_right
            .btn-group{class: "module-#{lesson_module.id}"}
              = link_to (content_tag(:i, nil, :class=>'icon-move')), "#", :class => 'btn', id: "move_lesson_from_#{lesson_module.id}", :'data-tooltip' => t(".move_lesson"), "data-dropdown-alt" => "#move_lesson_dropdown_#{lesson_module.id}", disabled: true
              = link_to (content_tag(:i, nil, :class=>'icon-archive')), "#", class: 'btn btn_default manage_files_lesson', :"data-module-id" => lesson_module.id, :'data-tooltip' => t(".manage_files"), :"data-link-manage" => lesson_files_path(lesson_id: 'lessons_ids'), :'data-single' => true
              = link_to (content_tag(:i, nil, :class=>'icon-install')), "#", class: 'btn download_lesson_zip', :'data-tooltip' => t(".download_zip"), :"data-link-verify" => verify_download_lessons_path(lessons_ids: "lessons_param", allocation_tags_ids: @allocation_tags_ids), :"data-link-download" => download_files_lessons_path(lessons_ids: 'lessons_param', allocation_tags_ids: @allocation_tags_ids), :"data-module-id" => lesson_module.id
              = link_to (content_tag(:i, nil, :class=>'icon-checkmark')), "#", class: 'btn release_lessons', :"data-module-id" => lesson_module.id, :'data-tooltip' => t(".release"), :"data-link-update" => change_status_lesson_path(id: ':id', status: Lesson_Approved, allocation_tags_ids: @allocation_tags_ids)
              = link_to (content_tag(:i, nil, :class=>'icon-edit')), "#", class: 'btn link_edit_lesson btn_edit', :'data-tooltip' => t(".edit_lesson"), :"data-module-id" => lesson_module.id, :"data-link-edit" => edit_lesson_path(id: ':id', allocation_tags_ids: @allocation_tags_ids)
              = link_to (content_tag(:i, nil, :class=>'icon-trash')), "#", class: 'btn delete_lesson btn_del', :'data-tooltip' => t(".delete_lesson"), :'data-link-delete' => lesson_path(id: ':id', allocation_tags_ids: @allocation_tags_ids), :'data-module_id' => lesson_module.id
              #lesson_dropdown.dropdown-alt.dropdown-tip
                .dropdown-panel
                  #dropdown_alert{:style => "display: block"}
                    %ul
                    - academic_allocation.allocation_tag.academic_allocations.where(academic_tool_type: 'LessonModule').each_with_index do |aallocation, idx|
                    - lmodule = LessonModule.find(aallocation.academic_tool_id)
                      - unless idx == idxm
                        %li
                          %span{style: "display: inline"}
                            = radio_button_tag(:move_to_module, lmodule.id)
                            = lmodule.name
                    .control_buttons{align: "right"}
                      = button_tag t(".cancel"), type: :button, class: 'btn', id: "btn-cancel-move-#{lesson_module.id}"
                      = button_tag t(".move"), type: :button, class: 'btn btn_main move_lessons', :"data-module-id" => lesson_module.id, :"data-link-move" => change_module_lesson_path(id: lesson_module.id, allocation_tags_ids: @allocation_tags_ids, lessons_ids: 'lessons_param', move_to_module: 'module_param')
        / Lessons list
        %table.tb_list{:"data-default-module" => lesson_module.is_default, class: "table-module-#{lesson_module.id}"}
          %thead
            %tr.lines
              - unless lessons.nil? or lessons.empty?
                %th.center.no_sort{style: 'width: 25px'}= check_box_tag( 'all', 'all', false, {id: "all_m_#{lesson_module.id}", class: 'lesson_check_all', :"data-children-names" => "m_#{lesson_module.id}"} )
                %th.center.no_sort= t(".order")
                %th= t(".name")
                %th.center{style: 'width: 10%'}= t(".type")
                %th.center.no_sort= t(".availability")
                %th.center.no_sort= t(".acceptance")

          %tbody
            - unless lessons.nil? or lessons.empty?
              - lessons.each_with_index do |lesson, idxl|

                %tr.lines{lesson_name: lesson.name, lesson_id: lesson.id, lesson_order: lesson.order, lesson_status: lesson.status}
                  %td.center
                    = check_box_tag( "m_#{lesson_module.id}", lesson.id, false, {class: "m_#{lesson_module.id}", :"data-file-type" => (lesson.type_lesson == Lesson_Type_File) })
                  %td.center{style: "width: 50px;"}
                    .lesson_arrows
                      .lesson_arrow_up= link_to (image_tag "lesson/up_arrow.png"), "#", class: 'up'
                      .lesson_arrow_down= link_to (image_tag "lesson/down_arrow.png"), "#", class: 'down'

                  %td
                    %div
                      - if lesson.address.blank?
                        = lesson.name
                      - else
                        = link_to lesson.name, edition_lesson_url(lesson, allocation_tags_ids: @allocation_tags_ids), class: "link_content lesson", "data-fancybox-type" => "iframe"
                    - if lesson.description
                      %div= lesson.description

                  %td= (lesson.type_lesson == Lesson_Type_File ? t(".file_type") : t(".link_type"))

                  %td.center{style: "width: 160px"}
                    = t(".since") unless not(lesson.schedule.end_date.nil?)
                    = [l(lesson.schedule.start_date, format: :normal), (lesson.has_end_date? ? l(lesson.schedule.end_date, format: :normal) : t(:no_end_date, scope: [:lessons, :list]))].join(" - ")

                  %td.center{style: "width: 70px"}
                    - status = [Lesson_Test, Lesson_Approved].delete_if {|v| v == lesson.status}
                    = link_to (image_tag "#{(lesson.status == Lesson_Test) ? 'rejected' : 'released'}.png"), "#", class: 'change_lesson_status', :"data-link-update" => change_status_lesson_path(id: lesson.id, status: status, allocation_tags_ids: @allocation_tags_ids), :'data-tooltip' => (lesson.status == Lesson_Test ?  t(".draft") :  t(".released")), :"data-module-id" => lesson_module.id
            - else
              %tr.lines
                %td.lesson_description.block_content_text_list.text_none{colspan: 5}= t(:none, scope: [:lessons, :list])

  - else
    .block_content.block_content_text= t(:none, scope: [:lesson_modules])

= javascript_include_tag "tablesorter", "tooltip", "lessons", "groups_tags"

:javascript
    var div_list = $(".list_lessons");
    var offer_id = "#{params[:offer_id]}";

  jQuery(function($) {

    $("a.lesson").click(function(e){
      e.preventDefault();
      $(this).nice_open_lesson();
    });

    $(".btn_edit, .btn_del, .release_lessons, .download_lesson_zip, .manage_files_lesson").attr("disabled", true);

    $(".link_new_lesson, .link_new_module, .edit_module").call_fancybox({
      width: '70%'
    });

    $('.lesson_check_all').map(function(){ 
      $(this).nice_checkbox({
        objects_to_change_status: ['.manage_files_lesson', '.download_lesson_zip', '.release_lessons', '[id^="move_lesson_from"]']
      });
    });

    $(".link_edit_lesson").click(function(){
      var selected_lessons = get_selected_lessons($(this).data('module-id'));

      if(selected_lessons.length == 1){
        url = $(this).data("link-edit").replace(':id', selected_lessons[0]);
        $(this).call_fancybox({href : url, open: true});
        return false;
      }else
        flash_message("#{I18n.t(:one_lesson_must_be_selected, scope: [:lesson_files])}", "alert");

      return false;
    });

    $('[id^="move_lesson_from_"]').click(function(){
      var dropdown_div  = $($(this).parent()).children('#lesson_dropdown');
      var lesson_ids = get_selected_lessons($(this).attr("id").split('_')[3]);
      if(can_do_action(lesson_ids))
        $(dropdown_div).toggle();
      else
        $(dropdown_div).hide();
        event.preventDefault();
    });

    $('[id^="btn-cancel-move-"]').click(function(){
      $($(this).get(0).parentNode.parentNode.parentNode.parentNode).hide();
    });

    $(".move_lessons").click(function(){
      erase_flash_messages();
      var module_id = $(this).data("module-id");
      var lesson_ids = get_selected_lessons(module_id);
      var destination_module = $("input[name='move_to_module']:checked", ".module-"+module_id);

      if(can_do_action(lesson_ids)){
        if(destination_module.length < 1) // se nenhum módulo destino foi selecionado
          alert("#{I18n.t(:must_select_module, scope: [:lessons, :errors])}"); 
        else{
          var url = $(this).data('link-move').replace('lessons_param', lesson_ids).replace('module_param', destination_module.val()).replace("undefined", "");

          $.put(url, function(data){
            flash_message(data.msg, 'notice');

            $.get($('.list_lessons').data('link-list'), function(data){
              $('.list_lessons:first').replaceWith(data);
            });
          }).error(function(data){
            flash_message(data.msg, 'alert');
          });
        }
      }

    });

    $('.change_lesson_status, .release_lessons').click(function() {
      erase_flash_messages();
      $('#lesson_dropdown').hide();

      var module_id = $(this).data("module-id");
      var url = $(this).data("link-update");

      if(typeof(module_id) != "undefined" || $(this)[0].className == "change_lesson_status"){
        
        if ($(this)[0].className != "change_lesson_status"){
          var lesson_ids = get_selected_lessons($(this).data('module-id'));
          if(can_do_action(lesson_ids))
            url = url.replace(':id', lesson_ids);
          else
            return false;
        }

        $.put(url, function(data){
          $.get($('.list_lessons').data('link-list'), function(data){
            $('.list_lessons:first').replaceWith(data);
          });
        }).error(function(data) {
          if(typeof(module_id) != "undefined"){
            $.get($('.list_lessons').data('link-list'), function(data){
              $('.list_lessons:first').replaceWith(data);
            });
          }

          if (typeof(data.responseText) != "undefined")
            flash_message(JSON.parse(data.responseText).msg, 'alert');
        });
      }

      return false;
    });

    $(".up, .down").click(function() {
      $('#lesson_dropdown').hide();
      var row = $(this).parents("tr:first");
      var id1 = row.attr('lesson_id');

      if ($(this).is(".up")) {
        if (row.prev().attr('lesson_order') == undefined) return false;

        var id2 = row.prev().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.put(url, function(){ row.insertBefore(row.prev()); });

      } else { // down
        if (row.next().attr('lesson_order') == undefined) return false;

        var id2 = row.next().attr('lesson_id');
        var url = "#{change_order_lesson_path(':id1', ':id2')}".replace(':id1', id1).replace(':id2', id2);

        $.put(url, function(data, t, x){ row.insertAfter(row.next()); });
      }
      return false;
    });

    $(".delete_module").click(function(){
      $('#lesson_dropdown').hide();

      $(this).nice_delete({
        parent: 'div.module',
        complement_success: function(data){
          $.get($('.list_lessons').data('link-list'), function(data){
            $('.list_lessons:first').replaceWith(data);
          });
        }
      });
    });

    $(".manage_files_lesson").click(function(){
      $('#lesson_dropdown').hide();
      var module_id = $(this).data('module-id');
      var selected_lessons = get_selected_lessons(module_id);

      if(selected_lessons.length == 1){
        lessons_with_file_type = $("input.m_"+module_id+":checked[data-file-type='true']");
        if(lessons_with_file_type.length == selected_lessons.length){
          url = $(this).data("link-manage").replace('lessons_ids', selected_lessons[0]);
          $(this).call_fancybox({href : url, open: true});
        }else
          flash_message("#{I18n.t(:lesson_must_have_file_type, scope: [:lesson_files])}", "alert");
      }else
        flash_message("#{I18n.t(:one_lesson_must_be_selected, scope: [:lesson_files])}", "alert");
    });

    $(".delete_lesson").click(function(){
      var lessons = get_selected_lessons($(this).data("module_id"));

      if(can_do_action(lessons_ids)){
        $(this).nice_delete({
          url: $(this).data("link-delete").replace(':id', lessons),
          complement_success: function() {
            $.get($('.list_lessons').data('link-list'), function(data){
              $('.list_lessons:first').replaceWith(data);
            });
          }
        });
      }

    });

    // download dos arquivos das aulas selecionadas em um módulo
    $(".download_lesson_zip").click(function(){
      var lessons = get_selected_lessons($(this).data("module-id"));
      var link_download = $(this).data("link-download").replace('lessons_param', lessons);

      if(can_do_action(lessons_ids)){
        jQuery.ajax({
          url: $(this).data("link-verify").replace('lessons_param', lessons),
          type: "GET",
          success: function(){
            window.location.href = link_download;
          },
          error: function() {
            flash_message("#{I18n.t(:invalid_lesson_to_download, :scope => [:lessons, :errors])}", "alert");
          }
        });
      }
    });

  });

  // função que retorna uma lista de ids das aulas selecionadas em determinado módulo
  function get_selected_lessons(module_id){
    lessons_ids = new Array;
    module_check_boxes = $('[name="m_'+module_id+'"]');
    // coloca, no array, todos os ids das aulas selecionadas para efetuar a ação do módulo
    module_check_boxes.map(function(){
      if(this.checked == true){ lessons_ids.push(this.value) }
    });
    return lessons_ids;
  }

  // verifica se pode realizar a ação (não permitirá e exibirá alerta se nenhuma aula tiver sido selecionada)
  function can_do_action(selected_lessons){
    if(selected_lessons.length == 0){
      flash_message('#{I18n.t(:must_select_lessons, scope: [:lessons, :notifications])}', "alert");
      return false;
    }else
      return true;
  }
    