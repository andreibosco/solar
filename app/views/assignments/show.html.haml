-# classe utilizada em botões que podem ou não estar desabilitados
- btn_class        = assignment_in_time?(@assignment) ? "btn btn_main" : "btn btn_disabled"
- btn_cancel_class = assignment_in_time?(@assignment) ? "btn btn_caution" : "btn btn_disabled"

-# Descricao da atividade 
.block_wrapper
  .block_title
    %h2
      = image_tag "icon_suitcase_portfolio.png", :alt => " ", :class=>'block_title_icon' 
      = @assignment.name
  .block_content
    %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
      %thead
        %tr.lines
          %th=t(:description, :scope => [:portfolio, :information])
          %th{:align => "right", :style => "width:70px"}
            = image_tag "clock.png", :alt => " ", :class => "block_title_icon"
            = t(:activity_begin, :scope => [:portfolio, :information])
          %th.clock_icon
            = image_tag "clock.png", :alt => " ", :class => "block_title_icon"
            = t(:activity_end, :scope => [:portfolio, :information])
      %tbody
        %tr.lines
          %td= @assignment.enunciation
          %td.center= l(@assignment.schedule.start_date, :format => :files)
          %td.center= l(@assignment.schedule.end_date, :format => :files)

-# Arquivos enviados pelo professor
.block_wrapper
  .block_title
    %h2
      = image_tag("icon_suitcase_portfolio.png", :alt => " ", :class => 'block_title_icon')
      = t(:activity_files, :scope => [:portfolio, :files])
    %span.download_all_icon
      - unless @assignment_enounciation_files.empty?
        = button_tag(:type => :button, :onclick => "javascript:window.location.href='#{download_files_assignments_path(:assignment_id => @assignment.id, :type => "enunciation", :zip => true)}'", :class => "btn btn_default") do
          = content_tag(:span, t(:download_all_files_zip, :scope => [:portfolio, :files]))
          = content_tag(:span, image_tag("icon_folder_compressed.png"))
  .block_content
    - unless @assignment_enounciation_files.empty?
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th= t(:name, :scope => [:portfolio, :files])
            %th{:align => "right", :style => "width: 30px;"}= t(:size, :scope => [:portfolio, :files])
            %th.clock_icon
              = image_tag "clock.png", :alt => " ", :class => "block_title_icon"
              = t(:sent_on, :scope => [:portfolio, :files])
          - @assignment_enounciation_files.each do |file|
            %tr.lines
              %td
                = link_to image_tag( icon_attachment(file.attachment_file_name) ), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), { :class => "file_icon", :alt => t(:download_file, :file_name => file.attachment_file_name, :scope => [:portfolio, :files]) }
                = link_to file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), {:class => "link_content"}
              %td= format('%.2f KB', file.attachment_file_size/1024.0)
              %td{:align => "center"}= l(file.attachment_updated_at, :format => :files)
    - else
      .portfolio_div_padding= t(:itens_not_found)

-# Participantes do grupo
- if @assignment.type_assignment == Group_Activity
  .block_wrapper
    .block_title
      %h2
        = image_tag "icon_participants.png", :alt => " ", :class => 'block_title_icon'
        = @group.group_name
    .block_content
      - gp = GroupParticipant.all_by_group_assignment(@group_id)
      - unless gp.empty?
        %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
          %thead
            %tr.lines
              %th= t(:participants, :scope => [:portfolio, :group_assignments])
          %tbody
            - gp.each do |participant|
              %tr.lines
                %td= participant.user.name
      - else
        .portfolio_div_padding= t(:itens_not_found)

-# Arquivos enviados pelo aluno
.block_wrapper
  .block_title
    %h2
      = image_tag "icon_suitcase_portfolio.png", :alt => " ", :class=>'block_title_icon'
      = t(:sent_files, :scope => [:portfolio, :files])
    %span.download_all_icon
      - unless @send_assignment_files.nil? or @send_assignment_files.empty?
        = button_tag(:type => :button, :onclick => "javascript:window.location.href='#{download_files_assignments_path(:assignment_id => @assignment.id, :student_id => @student_id, :group_id => @group_id, :type => "assignment", :zip => true)}'", :class => "btn btn_default") do
          = content_tag(:span, t(:download_all_files_zip, :scope => [:portfolio, :files]))
          = content_tag(:span, image_tag("icon_folder_compressed.png"))
  .block_content
    - unless @send_assignment_files.nil? or @send_assignment_files.empty?
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th= t(:name, :scope => [:portfolio, :files])
            %th{:align => "right", :style => "width: 80px"}= t(:size, :scope => [:portfolio, :files])
            - if @assignment.type_assignment == Group_Activity 
              %th{:align => "right", :style => "width: 80px"}= t(:sent_by, :scope => [:portfolio, :files])
            %th.clock_icon
              = image_tag "clock.png", :alt => " ", :class=>"block_title_icon"
              = t(:sent_on, :scope => [:portfolio, :files])
            - if can? :delete_file, @assignment and @assignment.user_can_access_assignment(@user.id, @student_id, @group_id)
              %th{:style => "width: 30px"}
        %tbody
          - @send_assignment_files.each do |file|
            %tr.lines
              %td
                = link_to image_tag(icon_attachment(file.attachment_file_name)), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :student_id => @student_id, :group_id => @group_id, :type => "assignment"), {:class => "file_icon", :alt => " "}
                = link_to file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :student_id => @student_id, :group_id => @group_id, :type => "assignment"), {:class => "link_content"}
              %td.right= format('%.2f KB', file.attachment_file_size/1024.0)
              - if @assignment.type_assignment == Group_Activity
                %td.right= file.user.nick
              %td.center= l(file.attachment_updated_at, :format => :files)
              - if can? :delete_file, @assignment and @assignment.user_can_access_assignment(@user.id, @student_id, @group_id)
                %td= button_to t(:delete, :scope => [:portfolio, :files]), delete_file_assignments_path(:assignment_id => params[:id], :file_id => file.id, :type => 'assignment'), :confirm => t(:delete_msg, :scope => [:portfolio, :files]), :class => btn_cancel_class, :disabled => !assignment_in_time?(@assignment)
    - else
      .portfolio_div_padding= t(:itens_not_found)
    -# Enviar arquivos
    - if can? :upload_file, @assignment and @assignment.user_can_access_assignment(@user.id, @student_id, @group_id)
      %div{:style => "background-color:white;padding-top:6px"}
        - group_assignment_id = @group_participants.first.group_assignment_id unless @group_participants.nil?
        = form_for(:assignment, :url => upload_file_assignments_path(:assignment_id => @assignment.id, :type => 'assignment')) do |f|
          %p
            = f.file_field :file, :name => :file
            = f.submit t(:send), :class => btn_class, :disabled => !assignment_in_time?(@assignment)
          %p.block_content_gray
            = t(:send_file_obs, :scope => [:portfolio, :files])
          %p.block_content_gray=raw t(:send_file_text, :scope => [:portfolio, :files])

-# Área de avaliação
.block_wrapper
  .block_title
    %h2
      = image_tag "icon_participants.png", :alt => " ", :class=>'block_title_icon'
      = t(:evaluation, :scope => [:portfolio, :evaluation])
    %span.portfolio_title_button
      - if (can? :evaluate, @assignment)
        = button_tag t(:evaluate, :scope => [:portfolio, :evaluation]), :class => btn_class, :id => "btn_evaluate", :onclick => "javascript:btn_evaluate();", :disabled => !assignment_in_time?(@assignment)
        = button_tag t(:cancel, :scope => [:portfolio, :evaluation]), :class => "btn btn_caution", :id => "btn_cancel_evaluation", :onclick => "javascript:btn_cancel_evaluation();", :disabled => !assignment_in_time?(@assignment)
        = button_tag t(:save, :scope => [:portfolio, :evaluation]), :class => "btn btn_main", :id => "btn_save_evaluation", :disabled => !assignment_in_time?(@assignment)
  .block_content#evaluate_assignment_student
    %table.tb_list#tb_student_assignment{:border => "0",  :cellpadding => "0", :cellspacing => "0", :width => "100%"}
      - unless @send_assignment.nil? or ((@send_assignment.grade.nil? or @send_assignment.grade.blank?) and (@send_assignment.comment.nil? or @send_assignment.comment.blank?))
        %thead
          %tr.lines
            %th{:align => "right", :style => "width:30px"}= t(:grade, :scope => [:portfolio, :information])
            %th= t(:comment, :scope => [:portfolio, :comments])
        %tbody
          %tr.lines
            %td= @send_assignment.grade
            %td= @send_assignment.comment
      - else
        .portfolio_div_padding#no_itens_evaluation_tb= t(:itens_not_found)
    %table.tb_list#tb_student_assignment_evaluate{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%", :style => "display: none"}
      %thead
        %tr.lines
          %th.right{:style => "width:30px"}= t(:grade, :scope => [:portfolio, :information])
          %th= t(:comment, :scope => [:portfolio, :comments])
      %tbody
        %tr.lines
          %td= text_field_tag :evaluation_grade, @send_assignment.nil? ? "" : @send_assignment.grade, :size => 3
          %td= text_area_tag :evaluation_comment, @send_assignment.nil? ? "" : @send_assignment.comment, :rows => 4, :cols => 113

-# Área de comentários
.block_wrapper
  .block_title
    %h2
      = image_tag "icon_comments.png", :alt => " ", :class=>'block_title_icon'
      = t(:comments, :scope => [:portfolio, :comments])
    %span.portfolio_title_button
      - if (can? :send_comment, AssignmentComment)
        = button_tag t(:to_comment, :scope => [:portfolio, :comments]), :class => btn_class, :id => "btn_comment", :onclick => "javascript:btn_comment();", :disabled => !assignment_in_time?(@assignment)
  .forum_posts_wrapper
    - display_comment = @error_message.nil? ? "display:none" : "display:block"
    .comment_form{:style => "#{display_comment}"}
      %table.forum_post{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %tr
          %td.forum_post_icon{:rowspan => "3"}= image_tag('no_image_forum.png')
          %td.forum_post_head
            .forum_post_author
              .forum_participant_nick= @user.nick
              .forum_participant_profile
                - user_profile = Profile.user_allocation_tag_profile(@assignment.allocation_tag_id, @user.id)
                = user_profile.name
            .forum_post_date=l Date.current
        %tr
          %td.forum_post_content{:colspan => "2"}
            = form_for(:assignment_comment, :html => {:id => 'comment_form', :multipart => true}, :url => send_comment_assignment_path(@assignment.id, :student_id => @student_id, :group_id => @group_id)) do |f|
              .forum_post_inner_content= text_area_tag :comment, '', :rows => 4, :cols => 116
              .forum_post_attachment
                %h3= t(:attached_files, :scope => [:portfolio, :files])
                %ul.forum_post_attachment_list.comments_files_div
                  = file_field_tag 'comment_files[]', :class => "comments_files"
                  %a.more_comment_files_link{:href => "#", :onclick => "javascript:more_files();"}
                    = t(:attach_another, :scope => [:portfolio, :files])
              .portfolio_title_button
                = button_tag(:type => 'button', :class => "btn btn_caution", :id => "btn_cancel_comment_new", :alt => t(:cancel, :scope => [:portfolio, :comments]), :onclick => "javascript:btn_cancel_comment('new');") do
                  = content_tag(:span, t(:cancel, :scope => [:portfolio, :comments]))
                = submit_tag t(:send_comment, :scope => [:portfolio, :comments]), :confirm => t(:confirm_comment, :scope => [:portfolio, :comments]), :class=>'btn btn_main'

    - unless @comments.nil? or @comments.empty?
      - @comments.each_with_index do |comment, idx|
        %table{:class => ["forum_post", "tb_comments", "tb_comment_#{comment.id}"], :border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
          %tr
            %td.forum_post_icon{:rowspan => "3"}= image_tag(comment.user.photo.url(:forum), :alt => t(:mysolar_alt_img_user) + ' ' + comment.user.nick)
            %td.forum_post_head
              .forum_post_author
                .forum_participant_nick= comment.user.nick
                .forum_participant_profile
                  - user_profile = Profile.user_allocation_tag_profile(@assignment.allocation_tag_id, comment.user_id)
                  = user_profile.name
              .forum_post_date
                - unless comment.updated_at.blank?
                  = l(comment.updated_at, :format => :files)
                - else
                  = '-'
          %tr
            %td{:class => ["forum_post_content comment_#{comment.id}", "assignment_comment"], :colspan => "2"}
              .forum_post_inner_content= comment.comment
              .forum_post_attachment
                %h3= t(:attached_files, :scope => [:portfolio, :files])
                %ul.forum_post_attachment_list
                  - unless comment.comment_files.empty?
                    - comment.comment_files.each do |comment_file|
                      %li{:style => "list-style-type: none"}
                        = link_to image_tag(icon_attachment(comment_file.attachment_file_name), :alt => "oi"), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id, :student_id => @student_id, :group_id => @group_id, :type => "comment"), {:class => "file_icon"}
                        = link_to comment_file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id, :student_id => @student_id, :group_id => @group_id, :type => "comment"), {:class => "link_content"}
                        .assignment_files_info= l(comment_file.attachment_updated_at, :format => :files)
                        .assignment_files_info= format('%.2f KB', comment_file.attachment_file_size/1024.0)
                  - else
                    = '-'
                .portfolio_comment_button
                  - if (can? :remove_comment, AssignmentComment)
                    - btn_remove = assignment_in_time?(@assignment) ? "btn btn_caution" : "btn btn_disabled"
                    = button_tag t(:delete, :scope => [:portfolio, :comments]), :class => btn_remove, :onclick => "javascript:remove_comment(#{comment.id}, #{@assignment.id});", :disabled => !assignment_in_time?(@assignment)
                  - if (can? :send_comment, comment)
                    = button_tag t(:edit, :scope => [:portfolio, :comments]), :class => btn_class + " btn_edit_comment_#{comment.id}", :onclick => "javascript:btn_edit_comment(this, #{comment.id});", :disabled => !assignment_in_time?(@assignment)

              %td{:class => ["forum_post_content", "form_comment_#{comment.id}", "form_comment"], :colspan => "2", :style => "display:none"}
                = form_for(:assignment_comment, :html => {:id => "comment_form_#{comment.id}", :multipart => true}, :url => send_comment_assignment_path(@assignment.id, :student_id => @student_id, :group_id => @group_id, :comment_id => comment.id)) do |f|
                  .forum_post_inner_content= text_area_tag :comment, comment.comment, :rows => 4, :cols => 116
                  .forum_post_attachment
                    %h3= t(:attached_files, :scope => [:portfolio, :files])
                    %ul.forum_post_attachment_list.comments_files_div
                      - unless comment.comment_files.empty?
                        - comment.comment_files.each do |comment_file|
                          %li
                            = link_to comment_file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => comment_file.id), {:class => "link_content link_comment_#{comment_file.id}", :id => "#{comment_file.id}"}
                            .forum_post_date= l(comment_file.attachment_updated_at, :format => :files)
                            = image_tag("icon_delete_small.png", :onclick => "javascript:remove_file(#{comment_file.id}, #{comment.id}, this);", :id=>"remove_file_#{comment_file.id}", :alt => t(:remove_file, :scope => [:portfolio, :files]))
                            = image_tag("return_file.png", :onclick => "javascript:return_file(#{comment_file.id}, #{comment.id}, this);", :id=>"return_file_#{comment_file.id}", :class => "return_file", :alt => t(:return_file, :scope => [:portfolio, :files]))
                      = hidden_field_tag 'deleted_files[]', "", {:id => "delete_file_#{comment.id}"}
                      = file_field_tag 'comment_files[]', :class => "comments_files"
                      %a.more_comment_files_link{:href => "#", :onclick => "javascript:more_files();"}= t(:attach_another, :scope => [:portfolio, :files])
                  .portfolio_title_button
                    = button_tag(:type => 'button', :class => "btn btn_caution", :id => "btn_cancel_comment_#{comment.id}", :alt => t(:cancel, :scope => [:portfolio, :comments]), :onclick => "javascript:btn_cancel_comment('#{comment.id}');") do
                      = content_tag(:span, t(:cancel, :scope => [:portfolio, :comments]))
                    = button_tag t(:send_comment, :scope => [:portfolio, :comments]), :class => "btn btn_main", :id => "btn_cancel_comment_new", :onclick => "javascript:submit_edit_comment_form(#{comment.id});"
    - else
      .block_content.portfolio_div_padding#no_itens_message_comment
        = t(:itens_not_found)

:javascript
  var student_id    = '#{@student_id}';
  var group_id      = '#{@group_id}';
  var assignment_id = '#{@assignment.id}';

  function undo_btn_comment_changes(comment_id){
    if(comment_id == 'new'){
      $("#btn_comment").fadeIn(); 
      $(".comment_form").hide();
      no_comments_div();
    }else{
      $(".btn_edit_comment_"+comment_id).fadeIn();
      $(".comment_"+comment_id).fadeIn();
      $(".form_comment").hide();
      $(".assignment_comment").fadeIn();
    }
  }

  function undo_btn_evaluate_changes(){
    $("#tb_student_assignment_evaluate").hide(); 
    $("#tb_student_assignment").fadeIn();
    $("#btn_cancel_evaluation").hide();
    $("#btn_save_evaluation").hide();
    $("#btn_evaluate").fadeIn(); 
    show_no_itens_div = $('td', '#tb_student_assignment').length == 0;
    if(show_no_itens_div){
      $("#no_itens_evaluation_tb").fadeIn();
    }
  }

  function undo_everything(){
    undo_btn_evaluate_changes();
    undo_btn_comment_changes("new");
    undo_btn_comment_changes();
  }

  function btn_comment(){
    undo_everything();
    $("#no_itens_message_comment").remove();
    $("#btn_comment").hide();
    $(".comment_form").fadeIn();
  }
  
  function btn_edit_comment(this_div, comment_id){
    undo_everything();
    $(".comment_"+comment_id).hide();
    $(".form_comment_"+comment_id).fadeIn(); 
  }

  function btn_evaluate(){
    undo_everything();
    $("#tb_student_assignment").hide();
    $("#no_itens_evaluation_tb").hide();
    $("#tb_student_assignment_evaluate").fadeIn();
    $("#btn_evaluate").hide();
    $("#btn_cancel_evaluation").fadeIn();
    $("#btn_save_evaluation").fadeIn();
  }

  function submit_edit_comment_form(comment_id){
    var deleted_files = new Array();
    var disabled_files = $(".disabled_file_"+comment_id);
    $(disabled_files).each(function(i){
      deleted_files.push($(disabled_files)[i].id);
    });
    $("#delete_file_"+comment_id).val(deleted_files); 
    $("#comment_form_"+comment_id).submit();
  }

  $("#btn_save_evaluation").click(function(){
    if (confirm('#{t(:confirm_evaluation, :scope => [:portfolio, :evaluation])}')){

      var evaluation_grade    = ''+$("#evaluation_grade").attr('value')+'';
      var evaluation_comment  = $("#evaluation_comment").attr('value');
      var url                 = '#{evaluate_assignment_path(@assignment.id)}';

      $.ajax({
        url: url,
        type: 'POST',
        data:  {'grade': evaluation_grade, 'comment': evaluation_comment, 'student_id': student_id, 'group_id': group_id},
        success: function(data) {
          console.log(data);
          if (data.success == false) {
            flash_message(data.flash_msg, data.flash_class);
            if (data.cancel == true) {
              undo_btn_evaluate_changes();
            }
          }else{
            if($(".mysolar_portlets_content", data).length != 0){
              $("#body_wrapper").html(data);
            }else{
              $("#evaluate_assignment_student").html(data);
              undo_btn_evaluate_changes();
              flash_message('#{t(:evaluated_success, :scope => [:portfolio, :evaluation])}', 'notice');
            }
          }
          
        }
      });
    }
  });

  function btn_cancel_comment(comment_id){
    if (confirm('#{t(:cancel_comment, :scope => [:portfolio, :comments])}')){
      undo_btn_comment_changes(comment_id);  
      flash_message('#{t(:comment_canceled, :scope => [:portfolio, :comments])}', 'notice');
    }
  }

  function no_comments_div(){
    var dont_have_comments = $('.tb_comments').length == 0;
    var dont_already_have_message = $("#no_itens_message_comment").length == 0;
    if(dont_have_comments && dont_already_have_message){
      $('<div id="no_itens_message_comment" class="block_content portfolio_div_padding">#{t(:itens_not_found)}</div>').appendTo($(".forum_posts_wrapper"));
    }else{
      $('#no_itens_message_comment').remove();
    }
  }

  function btn_cancel_evaluation(){
    if (confirm('#{t(:cancel_evaluation, :scope => [:portfolio, :evaluation])}')){
      undo_btn_evaluate_changes();  
      flash_message('#{t(:evaluation_canceled, :scope => [:portfolio, :evaluation])}', 'notice');
    }
  }

  function remove_file(comment_file_id, comment_id, this_div){
    $(this_div).hide();
    $("#return_file_"+comment_file_id).fadeIn();
    $(".link_comment_"+comment_file_id).css("text-decoration", "underline line-through");
    $(".link_comment_"+comment_file_id).addClass("disabled_file_"+comment_id);
  }

  function remove_comment(comment_id){
    url = '#{remove_comment_assignment_path(@assignment.id)}';
    if (!confirm("#{t(:message_confirm)}")) return;
      $.ajax({
        type: "DELETE",
        url: url,
        data: {'comment_id': comment_id},
        success: function(data) {
          if (data.success == true) {
            $('.tb_comment_' + comment_id).remove();
          }
          flash_message(data.flash_msg, data.flash_class);
          no_comments_div();
        },
      });
  }

  $(document).ajaxError(function() {
    flash_message("#{t(:no_permission)}", "alert");
  }); 

  function return_file(comment_file_id, comment_id, this_div){
    $(this_div).hide();
    $("#remove_file_"+comment_file_id).fadeIn();
    $(".link_comment_"+comment_file_id).css("text-decoration", "underline");
    $(".link_comment_"+comment_file_id).removeClass("disabled_file_"+comment_id);
  }

  function more_files() {
    $(".more_comment_files_link").remove();
    $('<div><input id="comment_files_" class="comments_files" name="comment_files[]" type="file"><a href="#" class="more_comment_files_link" onclick="javascript:more_files();" >#{t(:attach_another, :scope => [:portfolio, :files])}</a></div>').appendTo($(".comments_files_div"));
  }
