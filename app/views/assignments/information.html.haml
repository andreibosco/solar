= javascript_include_tag 'group_assignments'

-# Informações da atividade
.block_wrapper
  .block_title
    %h2
      %i.icon-suitcase
      = @assignment.name
  .block_content
    %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
      %thead
        %tr.lines
          %th=t :description, :scope => [:assignment, :information]
          %th.clock_icon
            %i.icon-clock
            =t :begin, :scope => [:assignment, :information]
          %th.clock_icon
            %i.icon-clock
            =t :end, :scope => [:assignment, :information]
      %tbody
        %tr.lines
          %td= @assignment.enunciation
          %td.center= l(@assignment.schedule.start_date, :format => :files)
          %td.center= l(@assignment.schedule.end_date, :format => :files)

-# Arquivos enviados pelo professor
.block_wrapper
  .block_title
    %h2
      %i.icon-suitcase
      =t :activity_files, :scope => [:assignment, :files]
    %span.download_all_icon
      - unless @assignment_enunciation_files.empty?
        = button_tag(:type => :button, :onclick => "javascript:window.location.href='#{download_files_assignments_path(:assignment_id => @assignment.id, :type => "enunciation", :zip => true)}'", :class => "btn btn_default") do
          = content_tag(:span, t(:download_all_files_zip, :scope => [:assignment, :files]))
          %i.icon-install

  .block_content
    - unless @assignment_enunciation_files.empty?
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th=t :name, :scope => [:assignment, :files]
            %th{:align => "right", :style => "width: 30px;"}= t(:size, :scope => [:assignment, :files])
            %th.clock_icon
              %i.icon-clock
              =t :sent_on, :scope => [:assignment, :files]
          - @assignment_enunciation_files.each do |file|
            %tr.lines
              %td
                = link_to image_tag( icon_attachment(file.attachment_file_name) ), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), { :class => "file_icon", :alt => t(:download_file, :file_name => file.attachment_file_name, :scope => [:assignment, :files]) }
                = link_to file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), {:class => "link_content"}
              %td= format('%.2f KB', file.attachment_file_size/1024.0)
              %td{:align => "center"}= l(file.attachment_updated_at, :format => :files)
    - else
      .portfolio_div_padding=t :itens_not_found

- # Grupos
- if @assignment.type_assignment == Assignment_Type_Group
  = render "group_assignment_content_div"
- else
  -# Lista de alunos
  .block_wrapper
    .block_title
      %h2
        %i.icon-users
        =t :participants, :scope => [:assignment, :group_assignments]
    .block_content
      - unless @students.empty?
        %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
          %thead
            %tr.lines
              %th=t :students, :scope => [:assignment, :information]
              %th{:align => "center", :style => "width:30px"}=t :date, :scope => [:assignment, :information]
              %th{:align => "right", :style => "width:80px"}=t :situation, :scope => [:assignment, :information]
              %th{:align => "right", :style => "width:30px"}=t :grade, :scope => [:assignment, :information]
              %th{:align => "center", :style => "width:50px"}=t :comments, :scope => [:assignment, :comments]
          %tbody
            - @students.each_with_index do |student, idx|
              - student_info = assignment_participant_info(student.id, @assignment, @allocation_tag.id)
              %tr.lines
                %td= link_to student.name, student_assignment_path(@assignment.id, :student_id => student.id), :class => :link_content
                %td{:align => "center"}= student_info["file_delivery_date"]
                %td{:class => "assignment_#{student_info["situation"]}"}= t(student_info["situation"].to_sym)
                %td{:align => "center"}= student_info["grade"]
                %td{:align => "center"}
                  %i.icon-comment.big{class: student_info["have_comments"] ? "" : "empty"}
      - else
        .portfolio_div_padding=t :itens_not_found


:javascript
  // as variáveis e os métodos aqui dispostos não podem ser levados ao arquivo 'group_assignments.js.erb' 
  // devido à necessidade de variáveis da tela e a geração de inconsistência nos grupos excluídos
  var deleted_groups = new Array();

  function show_import_and_new_groups_box(show_import_button) {

    var new_and_import_groups_box = new Array();

    new_and_import_groups_box.push('<div class="group_assignments_manage_buttons group_box_without_info">');
      new_and_import_groups_box.push('<div class="group_assignments_manage_buttons_title">');
      new_and_import_groups_box.push('</div>');
      new_and_import_groups_box.push('<ul>');
        new_and_import_groups_box.push('<li class="btn_new">');
          new_and_import_groups_box.push('<input type="button" style="width:90px" id="new_group_assignment" value="#{t(:new_group, :scope => [:assignment,:group_assignments])}" class="btn btn_default" onclick="javascript:btn_new_group(#{@assignment.id}, \'#{t(:no_participant, :scope => [:assignment, :group_assignments])}\', \'#{t(:new_group, :scope => [:assignment, :group_assignments])}\');"/>');        
        new_and_import_groups_box.push('</li>');
          if (show_import_button == 'true'){
            new_and_import_groups_box.push('<li id="btn_import">');
              new_and_import_groups_box.push('<input type="button" style="width:90px" id="import" value="#{t(:import_groups, :scope => [:assignment, :group_assignments])}" class="btn btn_default" onclick="javascript:showImportGroupBox(\'#{import_groups_page_assignment_path(@assignment.id)}\', \'\');"/>');
            new_and_import_groups_box.push('</li>');
          }
      new_and_import_groups_box.push('</ul>');
    new_and_import_groups_box.push('</div>');

    // cria a nova div de novo grupo 
    $(new_and_import_groups_box.join("")).appendTo($(".import_and_new_groups"));
  }

  function delete_group(group_div_id, assignment_id, can_manage_group) {
    // apenas permite deleção se o grupo não tiver arquivos enviados
    if (can_manage_group){
      var deleted_div = $('#'+group_div_id);
      var all_li      = $('li', deleted_div); // todos os "li" de uma "ul" = todos os participantes de um grupo

      all_li.each(function(i){
        if($(all_li[i]).attr('class').indexOf("no_students_message") == -1){
          $(all_li[i]).appendTo($('.ul_no_group'));  // remove os participantes do grupo e acrescenta na lista de sem grupo
          $('.ul_no_group > .no_students_message').remove(); // remove a mensagem de "sem participantes" em "alunos sem grupo"
        }
      });

      deleted_div.remove(); // remove o grupo

      if (group_div_id.indexOf('group_new') == -1) { //se não for um novo grupo sendo excluído
        deleted_groups.push(group_div_id); // acrescenta o id da div do grupo aos grupos excluídos
      }

    }
  }