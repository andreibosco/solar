= javascript_include_tag 'group_assignments.js'

-# Informações da atividade
.block_wrapper
  .block_title
    %h2
      = image_tag("icon_suitcase_portfolio.png", :alt => " ", :class=>'block_title_icon')
      = @assignment.name
  .block_content
    %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
      %thead
        %tr.lines
          %th=t :description, :scope => [:assignment, :information]
          %th.clock_icon
            = image_tag("clock.png", :alt => " ", :class=>"block_title_icon")
            =t :begin, :scope => [:assignment, :information]
          %th.clock_icon
            = image_tag("clock.png", :alt => " ", :class=>"block_title_icon")
            =t :end, :scope => [:assignment, :information]
      %tbody
        %tr.lines
          %td= @assignment.enunciation
          %td.center= l(@assignment.schedule.start_date, :format => :files)
          %td.center= l(@assignment.schedule.end_date, :format => :files)

-# Arquivos enviados pelo professor
.block_wrapper
  .block_title
    %h2
      = image_tag("icon_suitcase_portfolio.png", :alt=> " ", :class=>'block_title_icon')
      =t :activity_files, :scope => [:assignment, :files]
    %span.download_all_icon
      - unless @assignment_enounciation_files.empty?
        = button_tag(:type => :button, :onclick => "javascript:window.location.href='#{download_files_assignments_path(:assignment_id => @assignment.id, :type => "enunciation", :zip => true)}'", :class => "btn btn_default") do
          = content_tag(:span, t(:download_all_files_zip, :scope => [:assignment, :files]))
          = content_tag(:span, image_tag("icon_folder_compressed.png"))

  .block_content
    - unless @assignment_enounciation_files.empty?
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th=t :name, :scope => [:assignment, :files]
            %th{:align => "right", :style => "width: 30px;"}= t(:size, :scope => [:assignment, :files])
            %th.clock_icon
              = image_tag "clock.png", :alt => " ", :class=>"block_title_icon"
              =t :sent_on, :scope => [:assignment, :files]
          - @assignment_enounciation_files.each do |file|
            %tr.lines
              %td
                = link_to image_tag( icon_attachment(file.attachment_file_name) ), download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), { :class => "file_icon", :alt => t(:download_file, :file_name => file.attachment_file_name, :scope => [:assignment, :files]) }
                = link_to file.attachment_file_name, download_files_assignments_path(:assignment_id => @assignment.id, :file_id => file.id, :type => "enunciation"), {:class => "link_content"}
              %td= format('%.2f KB', file.attachment_file_size/1024.0)
              %td{:align => "center"}= l(file.attachment_updated_at, :format => :files)
    - else
      .portfolio_div_padding=t :itens_not_found

- # Grupos
- if @assignment.type_assignment == Group_Activity
  #activities.block_wrapper
    .block_title
      %h2
        = image_tag("icon_participants.png", :alt => " ", :class=>'block_title_icon')
        =t :groups, :scope => [:assignment, :group_assignments]
      %span.group_elements_float
        - if can? :manage_groups, @assignment
          - btn_class = assignment_in_time?(@assignment) ? "btn btn_main" : "btn btn_disabled"
          = button_tag t(:manage_groups, :scope => [:assignment, :group_assignments]), :class => btn_class, :id => "manage_group_assignment", :alt => t(:manage_groups, :scope => [:assignment, :group_assignments]), :onclick => "javascript:btn_manage_groups('#{@assignment.id}', '#{verify_group_of_assignments(@assignment.id)}');", :disabled => !assignment_in_time?(@assignment)
          = button_tag(:type => 'button', :class => "btn btn_caution", :id => "btn_cancel_management", :alt => t(:cancel, :scope => [:assignment, :group_assignments])) do
            = content_tag(:span, t(:cancel, :scope => [:assignment, :group_assignments]))
          = button_tag t(:save, :scope => [:assignment, :group_assignments]), :class => "btn btn_main", :id => "btn_save_management", :alt => t(:save, :scope => [:assignment, :group_assignments])
    .group_assignment_content
      .group_assignment_content
        - unless @groups.nil? or @groups.empty?
          - @groups.each_with_index do |group, idx|
            - group_info = info_assignment_group(group)
            .group_participants{:id => ["group", group.id]}
              %h3{:class => "group_name_#{!group_info["evaluated"]}", :alt => "#{group_info["error_message"]}"}
                = group.group_name
                %span.group_elements_float
                  =# button_to t(:evaluate, :scope => [:assignment, :group_assignments]), assignment_path(@assignment.id, :group_id => group.id), {:class => "btn btn_default evaluate_group", :alt => t(:evaluate, :scope => [:assignment, :group_assignments]), :method => :get} #se tirar "method". envia como post; se deixar, ignora o "group_id"
                  = button_tag t(:evaluate, :scope => [:assignment, :group_assignments]), :onclick => "javascript:window.location.href='#{assignment_path(@assignment.id, :group_id => group.id)}'", :class => "btn btn_default evaluate_group"
              %div{:class => "edit_group_#{!group_info["evaluated"]}"}
                = text_field_tag "new_groups_names[][#{@assignment.id}]", group.group_name, :id => "text_field_group_#{group.id}", :class => "rename_group"
                %a.remove_group{:onclick => "javascript:delete_group('group_#{group.id}', #{@assignment.id}, #{group_info["can_remove"]});", :alt => "#{t(:remove, :group_name => group.group_name, :scope => [:assignment, :group_assignments])}", :title => group_info["error_message"]}= "x"
              %div{:class => "group_information_#{!group_info["evaluated"]}"}
                = group_info["quantity_files_sent"] 
                =t :files, :scope => [:assignment, :files]
                %span.group_elements_float
                  =t :grade, :scope => [:assignment, :information]
                  = @grade
                  = (group.send_assignment.nil? or group.send_assignment.grade.nil?) ? '-' : group.send_assignment.grade
              - group_participants = GroupParticipant.all_by_group_assignment(group.id)
              %ul{:id => "#{!group_info["evaluated"]}", :value => "#{group.id}"}
                - unless group_participants.empty?
                  - group_participants.each do |participant|
                    - participant_info = info_assignment_group_participant(participant.user_id, !group_info["evaluated"], group) 
                    %li{:class => "student_#{participant.user_id}", :value => "#{participant.user_id}", :id => "#{participant_info["can_be_moved"]}", :onmouseover => "javascript:student_mouseover(this, '#{participant_info["error_message"]}');", :onmouseout => "javascript:student_mouseout(this);"}= truncate(participant.user.name, :length => 40, :omission => '...')
                - else
                  %li.no_students_message=t :no_participant, :scope => [:assignment, :group_assignments]

        .group_participants.students_without_group
          %h3.group_name_true=t :students_with_no_group, :scope => [:assignment, :group_assignments]
          .edit_group_true
            =t :students_with_no_group, :scope => [:assignment, :group_assignments]
            = hidden_field_tag("new_groups_names[][#{@assignment.id}]", 'no_group', :class => "rename_group")
          %ul.ul_no_group
            - unless @students_without_group.nil? or @students_without_group.empty?
              - @students_without_group.each do |student_without_group| 
                %li#true{:class => "student_#{student_without_group.id}", :value => "#{student_without_group.id}", :onmouseover => "javascript:student_mouseover(this, 'no_message');", :onmouseout => "student_mouseout(this);"}= truncate(student_without_group.name, :length => 40, :omission => '...')
            - else 
              %li.no_students_message=t :no_participant, :scope => [:assignment, :group_assignments]
        .import_and_new_groups
- else
  -# Lista de alunos
  .block_wrapper
    .block_title
      %h2
        = image_tag "icon_participants.png", :alt => " ", :class=>'block_title_icon'
        =t :participants, :scope => [:assignment, :group_assignments]
    .block_content
      %table.tb_list{:border => "0", :cellpadding => "0", :cellspacing => "0", :width => "100%"}
        %thead
          %tr.lines
            %th=t :students, :scope => [:assignment, :information]
            %th{:align => "center", :style => "width:30px"}=t :date, :scope => [:assignment, :information]
            %th{:align => "right", :style => "width:80px"}=t :situation, :scope => [:assignment, :information]
            %th{:align => "right", :style => "width:30px"}=t :grade, :scope => [:assignment, :information]
            %th{:align => "center", :style => "width:50px"}=t :comments, :scope => [:assignment, :comments]
        %tbody
          - @students.each_with_index do |student, idx|
            - student_info = assignment_participant_info(student["id"], @assignment.id)
            %tr.lines
              %td
                = link_to student["name"], assignment_path(@assignment.id, :student_id => student["id"]), :class => :link_content
              %td{:align => "center"}
                = student_info["file_delivery_date"]
              %td{:class => "assignment_#{student_info["situation"]}"}
                = t(student_info["situation"].to_sym)
              %td{:align => "center"}= student_info["grade"]
              %td{:align => "center"}= image_tag( (student_info["have_comments"] == false) ? "icon_no_comments.png" : "icon_comments.png" , :alt => " ")


:javascript
  var deleted_groups = new Array();
  var url = '#{manage_groups_assignment_path(@assignment.id)}';

  function put_empty_message(){
    // recupera todos os grupos da atividade
    var all_groups = $('ul');
    for(var i = 0; i<all_groups.length; i++){
      var all_participants_each_group = $('li', all_groups[i]);
      // quando ele estiver vazio, acrescenta uma mensagem informativa
      if(all_participants_each_group.length == 0){
        $('<li class="no_students_message">#{t(:no_participant, :scope => [:assignment, :group_assignments])}</li>').appendTo(all_groups[i]);
      }
    }
  }

  function show_import_and_new_groups_box(show_import_button) {

    var new_and_import_groups_box = new Array();

    new_and_import_groups_box.push('<div class="group_assignments_manage_buttons">');
      new_and_import_groups_box.push('<div class="group_assignments_manage_buttons_title">');
      new_and_import_groups_box.push('</div>');
      new_and_import_groups_box.push('<ul>');
        new_and_import_groups_box.push('<li class="btn_new">');
          new_and_import_groups_box.push('<input type="button" style="width:90px" id="new_group_assignment" value="#{t(:new_group, :scope => [:assignment,:group_assignments])}" class="btn btn_default" onclick="javascript:btn_new_group(#{@assignment.id}, \'#{t(:no_participant, :scope => [:assignment, :group_assignments])}\', \'#{t(:new_group, :scope => [:assignment, :group_assignments])}\');"/>');        
        new_and_import_groups_box.push('</li>');
          if (show_import_button == 'true'){
            new_and_import_groups_box.push('<li id="btn_import">');
              new_and_import_groups_box.push('<input type="button" style="width:90px" id="import" value="#{t(:import_groups, :scope => [:assignment, :group_assignments])}" class="btn btn_default" onclick="javascript:showImportGroupBox(\'#{import_groups_page_assignment_path(@assignment.id)}\', \'\');"/>');
            new_and_import_groups_box.push('</li>');
          }
      new_and_import_groups_box.push('</ul>');
    new_and_import_groups_box.push('</div>');

    // cria a nova div de novo grupo 
    $(new_and_import_groups_box.join("")).appendTo($(".import_and_new_groups"));
  }

  $("#btn_cancel_management").click(function(){
    if (confirm("#{t(:cancel_management, :scope => [:assignment, :group_assignments])}")){

      $.ajax({
        url: url,
        type: 'POST',
        data:  {'btn_cancel': 'true'},
        success: function(data) {
          $('.group_assignment_content').html(data);
          undo_btn_manage_groups_divs_changes();
          flash_message('#{t(:management_cancel, :scope => [:assignment, :group_assignments])}', 'notice');
          // redefine o array de grupos excluídos para vazio
          deleted_groups = new Array();
        }
      });

    }
  });

  $("#btn_save_management").click(function(){
    if (confirm('#{t(:save_management, :scope => [:assignment, :group_assignments])}')){

      // todos os grupos
      var groups = $(".group_participants_manage ul"); 
      // todos os campos de nome
      var text_fields = $(".rename_group");
      var groups_to_save = new Array();
      // todos os nomes digitados nos campos
      var groups_names = $(text_fields).map(function(){return ''+this.value+''});

      groups.each(function(i){

        // recupera os ids dos participantes do grupo [i]
        var array_group_students_ids = $('li', groups[i]).map(function(){
          if(this.id != 'no_students_message' && this.value != 0){return ''+this.value+''}
        });

        var each_group_students_ids = new String();

        // recebe cada id dos estudantes do grupo em questão como string (array gera erro ao salvar por ajax)
        // [1, 2, 3, 4] => ["1 2 3 4"]
        array_group_students_ids.each(function(j){
          if(j !=  0){ each_group_students_ids += " "; }
          if(array_group_students_ids[j] != 0){
            each_group_students_ids += array_group_students_ids[j];
          }
        });

        groups_to_save.push({
          'group_id'   : $(groups[i]).attr('value'),
          'group_name' : groups_names[i],
          'student_ids': each_group_students_ids
        });

      });
      // each -> groups

      $.ajax({
        url: url,
        type: 'POST',
        data:  {'groups': groups_to_save, 'deleted_groups_divs_ids': deleted_groups},
        success: function(data) {
          if (data.success == false) {
            flash_message(data.flash_msg, data.flash_class);
          }else{
            if($(".mysolar_portlets_content", data).length != 0){
              $("#body_wrapper").html(data);
            }else{
              $('.group_assignment_content').html(data);
              undo_btn_manage_groups_divs_changes();
              flash_message('#{t(:management_success, :scope => [:assignment, :group_assignments])}', 'notice');
              // redefine o array de grupos excluídos para vazio
              deleted_groups = new Array();
            }
          }
        }
      });
    }
  });