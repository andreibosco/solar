.new_chat
  = simple_form_for @chat_room, html: {id: 'chat_form', multipart: true}, defaults: {required: true} do |f|
    = hidden_field_tag :allocation_tags_ids, @allocation_tags_ids

    .form-inputs.block_content
      = f.input :title
      = f.input :description, required: false

      .schedule_dates
        .left
          = f.fields_for :schedule, defaults: {required: true} do |s|
            = s.input :start_date, as: :string, input_html: {id: 'chat_start_date', value: l(@chat_room.schedule.start_date.to_date, format: :datepicker)}
            = s.input :end_date, as: :string, input_html: {id: 'chat_end_date', value: l(@chat_room.schedule.end_date.to_date, format: :datepicker)}

        .right
          = f.input :start_hour#, as: :time
          = f.input :end_hour

      = f.label "Participantes"
      %span.participants
        = f.check_box :type, {checked: @chat_room.chat_type, id: :chat_room_type}, @chat_room.chat_type

        %span{id: (@chat_room.chat_type ? "tab" : "define_participants")}
          = f.label :type, "Definir participantes"
        .box{class: (@chat_room.chat_type ? "" : "invisible")}
          %div
            /%input#all{type: "checkbox", :"data-children-names" => "chat_room[participants_attributes]"}
            /%br
            /= check_box_tag :all, {:"data-children-names" => "chat_room[participants_attributes]"}, false
            - @allocations.each do |allocation|
              / = "ble: #{allocation.id}"
              = f.simple_fields_for :participants do |p|
                / ="bla: #{allocation.id}"
                = p.check_box :allocation_id, {}, allocation.id#, checked: (@participants and @participants.include?(allocation))
                = p.label :allocation_id, allocation.user_name
                %br

      .right_buttons_assignment
        = button_tag t(:cancel), class: "btn btn_default btn_lightbox", type: "button", onclick: "javascript:removeLightBox();"
        = button_tag t(:save), class: "btn btn_main btn_lightbox", type: "button", id: "save"
    
:javascript

  jQuery(function($){

    $("#all").nice_checkbox();

    $("#chat_room_type").click(function(){
      if($("#chat_room_type").prop("checked")){
        $("#define_participants").attr("id", "tab");
        $(".box").show();
      }else{
        $("#tab").attr("id", "define_participants");
        $(".box").hide();
      }

    });

    var options = $.extend({}, $.datepicker.regional['#{I18n.locale}']); 
    
    /* impede que o usuário selecione uma data final menor que inicial e uma inicial maior que a final */
    $('#chat_start_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#chat_end_date').datepicker("option", "minDate", selected); } }) );
    $('#chat_end_date').datepicker( $.extend({}, options, { onSelect: function(selected) { $('#chat_start_date').datepicker("option", "maxDate", selected); } }) );

    $('#save').click(function(){
      $('#chat_form:last').serialize_and_submit({
        replace_list: $(".list_chat_rooms")
      });
    });

    /* se a data ficar vazia, recebe a data que veio ao carregar o formulário ou uma data permitida de acordo com a relação data final - data inicial */
    $('#chat_end_date').blur(function(){
      if ($(this).datepicker("getDate") == null)
        $(this).datepicker("setDate", new Date("#{@chat_room.schedule.end_date}"));
    });

    $('#chat_start_date').blur(function(){
      if($(this).datepicker("getDate") == null)
        $(this).datepicker("setDate", new Date("#{@chat_room.schedule.start_date}"));
    });

  });
