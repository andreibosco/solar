require 'rubygems'
require 'spork'
#uncomment the following line to use spork with the debugger
#require 'spork/ext/ruby-debug'

Spork.prefork do
  # Loading more in this block will cause your tests to run faster. However,
  # if you change any configuration or code from libraries loaded here, you'll
  # need to restart spork for it take effect.


  # IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
  # It is recommended to regenerate this file in the future when you upgrade to a 
  # newer version of cucumber-rails. Consider adding your own code to a new file 
  # instead of editing this one. Cucumber will automatically load all features/**/*.rb
  # files.
  # require 'simplecov'
  # SimpleCov.start 'rails'
  require 'cucumber/rails'
  #require 'ruby-debug'

  # Capybara defaults to XPath selectors rather than Webrat's default of CSS3. In
  # order to ease the transition to Capybara we set the default here. If you'd
  # prefer to use XPath just remove this line and adjust any selectors in your
  # steps to use the XPath syntax.
  Capybara.default_selector = :css
  Capybara.server_boot_timeout = 30

  #Capybara.app_host = 'http://localhost:3000'

  Capybara.register_driver :selenium do |app|
    Capybara::Selenium::Driver.new(app, :browser => :chrome)
  end

  # By default, any exception happening in your Rails application will bubble up
  # to Cucumber so that your scenario will fail. This is a different from how 
  # your application behaves in the production environment, where an error page will 
  # be rendered instead.
  #
  # Sometimes we want to override this default behaviour and allow Rails to rescue
  # exceptions and display an error page (just like when the app is running in production).
  # Typical scenarios where you want to do this is when you test your error pages.
  # There are two ways to allow Rails to rescue exceptions:
  #
  # 1) Tag your scenario (or feature) with @allow-rescue
  #
  # 2) Set the value below to true. Beware that doing this globally is not
  # recommended as it will mask a lot of errors for you!
  #
  ActionController::Base.allow_rescue = false

  Before('~@selenium','~@javascript') do
    DatabaseCleaner.strategy = :transaction
  end

  Before('@selenium,@javascript') do
    DatabaseCleaner.strategy = :truncation
  end

  Before do
    ActiveRecord::Fixtures.reset_cache
    fixtures_folder = File.join(::Rails.root.to_s, 'test', 'fixtures')
    fixtures = Dir[File.join(fixtures_folder, '*.yml')].map {|f| File.basename(f, '.yml') }
    ActiveRecord::Fixtures.create_fixtures(fixtures_folder, fixtures)
  end

end

Spork.each_run do
  # This code will be run each time you run your specs.

end
